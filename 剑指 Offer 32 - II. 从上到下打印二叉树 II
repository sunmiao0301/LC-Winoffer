//第一版 自己写的 没考虑代码的优化 但是想到下面两大坨代码只是调换了 A 和 B 的位置 所以可以换成用传参函数代替 后面版本试试
运行实例结果：
输入
[3,9,20,null,null,15,7]
输出
[[],[],[]]
预期结果
[[3],[9,20],[15,7]]
找出问题所在 因为不新建list的话 即使存到ret里面 也还是引用出来的 一旦clear 会导致ret里面的list也变成 0 
改写成第二版所示

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
    //理论上 两个队列 加上一个返回list即可
    Queue<TreeNode> queue_A = new LinkedList<>();
    Queue<TreeNode> queue_B = new LinkedList<>();
    List<Integer> list = new LinkedList<>();
    List<List<Integer>> ret = new LinkedList<>();
    queue_A.offer(root);
    while(!queue_A.isEmpty() || !queue_B.isEmpty()){
        if(queue_A.isEmpty()){
            while(!queue_B.isEmpty()){
                if(queue_B.peek().left != null && queue_B.peek().right != null){
                    queue_A.offer(queue_B.peek().left);
                    queue_A.offer(queue_B.peek().right);
                    list.add(queue_B.poll().val);
                }
                else if(queue_B.peek().left != null){
                    queue_A.offer(queue_B.peek().left);
                    list.add(queue_B.poll().val);
                }
                else if(queue_B.peek().right != null){
                    queue_A.offer(queue_B.peek().right);
                    list.add(queue_B.poll().val);
                }
                else
                    list.add(queue_B.poll().val);
            }
            ret.add(list);
            list.clear();
        }
        else{//queue_B.isEmpty()
            while(!queue_A.isEmpty()){
                if(queue_A.peek().left != null && queue_A.peek().right != null){
                    queue_B.offer(queue_A.peek().left);
                    queue_B.offer(queue_A.peek().right);
                    list.add(queue_A.poll().val);
                }
                else if(queue_A.peek().left != null){
                    queue_B.offer(queue_A.peek().left);
                    list.add(queue_A.poll().val);
                }
                else if(queue_A.peek().right != null){
                    queue_B.offer(queue_A.peek().right);
                    list.add(queue_A.poll().val);
                }
                else
                    list.add(queue_A.poll().val);
            }
            ret.add(list);
            list.clear();
        }
    }
    return ret;
    }
}

//第二版 第一版的问题所在是 因为不新建list的话 即使存到ret里面 也还是引用出来的 一旦clear 会导致ret里面的list也变成 0
但是时间复杂度太差了
看了一下思路 我觉得这应该是比较不多余的思路了啊 不知道哪还能优化
看了大神题解
K神的方法巧妙之处在于

1）通过for循环 对第i层的节点进行处理 （如第三版A处代码）
   不仅省略了while(!queue_A.isEmpty() || !queue_B.isEmpty())
   还省略了if(queue_A.isEmpty())等三次判断
2）通过List<Integer> temp = new LinkedList<>(); （如第三版B处代码）
   在每次循环中 都以此新的局部变量作为添加到ret的对象
   起到了代码压行效果
   而不像第二版中需要在最后返回时new一个新的等于list 然后list.clear();

执行结果：
通过
执行用时：
2 ms
, 在所有 Java 提交中击败了
8.19%
的用户
内存消耗：
38.6 MB
, 在所有 Java 提交中击败了
50.27%
的用户

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
    //理论上 两个队列 一个Integer链表 加上一个返回list即可
    if(root == null)return new LinkedList<List<Integer>>();
    Queue<TreeNode> queue_A = new LinkedList<>();
    Queue<TreeNode> queue_B = new LinkedList<>();
    List<Integer> list = new LinkedList<>();
    List<List<Integer>> ret = new LinkedList<>();
    queue_A.offer(root);
    while(!queue_A.isEmpty() || !queue_B.isEmpty()){
        if(queue_A.isEmpty()){
            while(!queue_B.isEmpty()){
                if(queue_B.peek().left != null && queue_B.peek().right != null){
                    queue_A.offer(queue_B.peek().left);
                    queue_A.offer(queue_B.peek().right);
                    list.add(queue_B.poll().val);
                }
                else if(queue_B.peek().left != null){
                    queue_A.offer(queue_B.peek().left);
                    list.add(queue_B.poll().val);
                }
                else if(queue_B.peek().right != null){
                    queue_A.offer(queue_B.peek().right);
                    list.add(queue_B.poll().val);
                }
                else
                    list.add(queue_B.poll().val);
            }
        }
        else{//queue_B.isEmpty()
            while(!queue_A.isEmpty()){
                if(queue_A.peek().left != null && queue_A.peek().right != null){
                    queue_B.offer(queue_A.peek().left);
                    queue_B.offer(queue_A.peek().right);
                    list.add(queue_A.poll().val);
                }
                else if(queue_A.peek().left != null){
                    queue_B.offer(queue_A.peek().left);
                    list.add(queue_A.poll().val);
                }
                else if(queue_A.peek().right != null){
                    queue_B.offer(queue_A.peek().right);
                    list.add(queue_A.poll().val);
                }
                else
                    list.add(queue_A.poll().val);
            }
        }
        ret.add(new LinkedList<Integer>(list));
        list.clear();
    }
    return ret;
    }
}

//第三版 根据K神思路自己写的
执行结果：
通过
执行用时：
1 ms
, 在所有 Java 提交中击败了
95.03%
的用户
内存消耗：
38.8 MB
, 在所有 Java 提交中击败了
12.71%
的用户
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ret = new LinkedList<>();
        if(root == null)return ret;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            List<Integer> temp = new LinkedList<>();····································································B
            for(int i = queue.size(); i > 0; i--){//这里先给int i = queue.size() 是不是怕后来的影响前面的·················A
                if(queue.peek().left != null)
                    queue.offer(queue.peek().left);
                if(queue.peek().right != null)
                    queue.offer(queue.peek().right);
                temp.add(queue.poll().val);
            }
            ret.add(temp);
        }
    return ret;
    }
}

//第四版 K神
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> res = new ArrayList<>();
        if(root != null) queue.add(root);
        while(!queue.isEmpty()) {
            List<Integer> tmp = new ArrayList<>();
            for(int i = queue.size(); i > 0; i--) {
                TreeNode node = queue.poll();
                tmp.add(node.val);
                if(node.left != null) queue.add(node.left);
                if(node.right != null) queue.add(node.right);
            }
            res.add(tmp);
        }
        return res;
    }
}
