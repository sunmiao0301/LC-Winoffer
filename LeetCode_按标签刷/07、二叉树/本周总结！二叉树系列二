[引文链接](https://github.com/sunmiao0301/leetcode-master/blob/master/problems/%E5%91%A8%E6%80%BB%E7%BB%93/20201003%E4%BA%8C%E5%8F%89%E6%A0%91%E5%91%A8%E6%9C%AB%E6%80%BB%E7%BB%93.md)

1）  
在二叉树：看看这些树的最小深度中，我们讲解如何求二叉树的最小深度， 这道题目要是稍不留心很容易犯错。  
注意这里最小深度是从根节点到最近叶子节点的最短路径上的节点数量。注意是叶子节点。  
什么是叶子节点，左右孩子都为空的节点才是叶子节点！  
求二叉树的最小深度和求二叉树的最大深度的差别主要在于处理左右孩子不为空的逻辑。  
注意到这一点之后 递归法和迭代法 都可以参照二叉树：看看这些树的最大深度写出来。  
  
2）  
在二叉树：我平衡么？中讲解了如何判断二叉树是否是平衡二叉树  
今天讲解一道判断平衡二叉树的题目，其实 方法上我们之前讲解深度的时候都讲过了，但是这次我们通过这道题目彻底搞清楚二叉树高度与深度的问题，以及对应的遍历方式。  
二叉树节点的深度：指从根节点到该节点的最长简单路径边的条数。 二叉树节点的高度：指从该节点到叶子节点的最长简单路径边的条数。  
但leetcode中强调的深度和高度很明显是按照节点来计算的。  
关于根节点的深度究竟是1 还是 0，不同的地方有不一样的标准，leetcode的题目中都是以节点为一度，即根节点深度是1。但维基百科上定义用边为一度，即根节点的深度是0，我们暂时以leetcode为准（毕竟要在这上面刷题）。  
当然此题用迭代法，其实效率很低，因为没有很好的模拟回溯的过程，所以迭代法有很多重复的计算。  
虽然理论上所有的递归都可以用迭代来实现，但是有的场景难度可能比较大。  
例如：都知道回溯法其实就是递归，但是很少人用迭代的方式去实现回溯算法！  
讲了这么多二叉树题目的迭代法，有的同学会疑惑，迭代法中究竟什么时候用队列，什么时候用栈？  
如果是模拟前中后序遍历就用栈，如果是适合层序遍历就用队列，当然还是其他情况，那么就是 先用队列试试行不行，不行就用栈。  
