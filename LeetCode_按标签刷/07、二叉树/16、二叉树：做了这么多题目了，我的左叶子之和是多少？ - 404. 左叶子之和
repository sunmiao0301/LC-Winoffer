//第一版 一遍过
执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
36.1 MB
, 在所有 Java 提交中击败了
75.32%
的用户
通过测试用例：
100 / 100
class Solution {
    int leftSum = 0;
    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null) return 0;
        sumhelper(root);
        return leftSum;
    }
    void sumhelper(TreeNode root){
        if(root.left != null){
            if(root.left.left == null && root.left.right == null)
                leftSum += root.left.val;
            else
                sumhelper(root.left);
        }
        if(root.right != null){
            sumhelper(root.right);
        }
    }
}

//另 也可以用广度优先

但是
复杂度分析
时间复杂度：O(n)O(n)，其中 nn 是树中的节点个数。
空间复杂度：O(n)O(n)。空间复杂度与广度优先搜索使用的队列需要的容量相关，为 O(n)O(n)。

