2 一切都是对象
Java乃至Java程序内的一切都是对象
PS： 句柄 在其他Java参考书中 被人称作一个“引用” 甚至一个“指针”

2.1 用句柄（变量）操纵对象
可创建一个String句柄：
String s;
但这里创建的只是句柄，并不是对象。若此时向s发送一条消息，就会获得一个错误（运行期）。
这是由于s实际并未与任何东西连接
因此，一种更安全的做法是：创建一个句柄时，记住无论如何都进行初始化：
String s = "asdf";
然而，这里采用的是一种特殊类型：字串可用加引号的文字初始化。通常，必须为对象使用一种更通用的初始化类型。

2.2 所有对象都必须创建
创建句柄时，我们希望它同一个新对象连接。通常用new关键字达到这一目的。
new的意思是：“把我变成这些对象的一种新类型”。所以在上面的例子中，可以说：
String s = new String("asdf");

2.2.1 保存到什么地方
数据的保存位置：
1）寄存器 
2）堆栈 —— 保存了对象句柄（指针）
3）堆（内存池）—— 保存了Java对象
4）静态存储 —— 通过static关键字指出一个对象的特定元素是静态的，但是注意 Java对象本身永远不会置于静态存储空间
5）常数存储 —— 通常存于程序代码内部 需要严格保护的也可以置入只读存储器ROM
6）非RAM存储 —— 

2.2.2 特殊情况：基本数据类型
---boolean char byte short int long float double void
这些数据类型都不需要用new创建对象（new将对象置于“堆”中）
这些数据类型容纳了具体的值 并置于堆栈中 从而实现高效的存取
需要注意的是：Java中的数据类型不随着机器结构变化而变化，这种大小的不可更改 正是Java程序具有很强移植能力的原因之一

2.2.3 Java的数组
Java中的数组可以保证被初始化 且不可在它的范围之外访问
1）创建  对象数组  的时候，实际创建的是一个句柄数组，句柄是null 正式使用之前若未为句柄分配对象 就会报告错误
2）创建  主类型数组  的时候，编译器会保证对他的初始化 内存划分为0
由此，典型的数组错误在Java中得到了避免

2.3 绝对不要清除对象
Java如何帮助我们完成清除工作？

2.3.1 作用域 ———————— 哪些放在堆中 哪些放在栈中？—————— 一切为了垃圾收集
{
  int x = 12;
  /* only x available */
  {
    int q = 96;
    /* both x & q available */
  }
  /* only x available */
  /* q “out of scope” */
}
如下代码
这种做法在Java里是不允许的，因为Java的设计者认为这样做使程序产生了混淆。
{
  int x = 12;
  {
    int x = 96; /* illegal */
  }
}

2.3.2 对象的作用域
{
String s = new String("a string");
} /* 作用域的终点 */
那么句柄s会在作用域的终点处消失。
然而，s指向的String对象依然占据着内存空间。
在上面这段代码里，我们没有办法访问对象，
因为指向它的唯一一个句柄已超出了作用域的边界。
在后面的章节里，会继续学习如何在程序运行期间传递和复制对象句柄。 //////////////////////////significate

创建的对象一旦离开了作用域 就丢失了句柄 但是对象仍存在 如果在C++中写上述代码 就会造成“因为程序员忘记释放内存导致 —— 内存溢出 ——”
由此 引出了java中的垃圾收集器

？？？但是这里我有个问题 
如果我使用new创建一个基本数据类型会怎么样呢？那么这个基本数据类型是放在堆 还是 栈？
new的基本数据类型是放在堆还是栈？
答：堆
下面这个类A里的int a，是存放在堆还是栈(Java虚拟机栈)内存？
public class A {
    int a = 0;
    B b = new B();
}
b是对象的引用肯定是存放在堆内存，那a呢？
在java中只要是成员变量，一旦它所在类被实例化后，都是放在堆内存的，不管它是不是基础类型。
局部变量才是放在栈内存的。所以java比其他语言内存安全的多。

2.4 新建数据类型：类
每个对象都为自己的数据成员保有存储空间；数据成员不会在对象之间共享。
下面是定义了一些数据成员的类示例：
class DataOnly {
  int i;
  float f;
  boolean b;
}
这个类并没有做任何实质性的事情，但我们可创建一个对象：
DataOnly d = new DataOnly();
可将值赋给数据成员，但首先必须知道如何引用一个对象的成员。
为达到引用对象成员的目的，首先要写上对象句柄的名字，再跟随一个点号（句点），再跟随对象内部成员的名字。即“对象句柄.成员”。例如：
d.i = 47;
d.f = 1.1f;
d.b = false;
一个对象也可能包含了另一个对象，而另一个对象里则包含了我们想修改的数据。
对于这个问题，只需保持“连接句点”即可。例如：
myPlane.leftTank.capacity = 100;
除容纳数据之外，DataOnly类再也不能做更多的事情，因为它没有成员函数（方法）。
为正确理解工作原理，首先必须知道“自变量”和“返回值”的概念。我们马上就会详加解释。

2.4.1 类中主成员与局部变量的默认初始值
若某个主数据类型属于一个类成员，那么即使不明确（显式）进行初始化，也可以保证它们获得一个默认值。
默认值情况
Boolean false
Char '\u0000'(null)
byte (byte)0
short (short)0
int 0
long 0L
float 0.0f
double 0.0d
一旦将变量作为类成员使用，就要特别注意由Java分配的默认值。
这样做可保证主类型的成员变量肯定得到了初始化（C++不具备这一功能），可有效遏止多种相关的编程错误。
然而，这种保证却并不适用于“局部”变量——那些变量并非一个类的字段。 ———— 类中主成员与局部变量的默认初始值
所以，假若在一个函数定义中写入下述代码：
int x;
那么x会得到一些随机值（这与C和C++是一样的），不会自动初始化成零。
我们责任是在正式使用x前分配一个适当的值。
如果忘记，就会得到一条编译期错误，告诉我们变量可能尚未初始化。
这种处理正是Java优于C++的表现之一。许多C++编译器会对变量未初始化发出警告，但在Java里却是错误。

2.4.2
