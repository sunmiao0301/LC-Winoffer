Java的基本原理就是“形式错误的代码不会运行”

之所以需要违例差错控制 —— 是因为:
若每次调用一个方法时都进行全面、细致的错误检查，那么代码的可读性也可能大幅度降低。
并且按这种方式控制错误，那么在创建大型、健壮、易于维护的程序时，肯定会遇到不小的阻挠。

本章在于介绍了用于正确控制违例所需的代码，以及在某个方法遇到麻烦的时候，该如何生成自己的违例。

9.1 基本违例
违例控制的步骤：
1）像创建对象一样创建违例 new 一个在内存堆里
2）停止当前路径 然后违例控制对象接管一切 并找机会继续程序的执行 执行方法有两种
 2.1）尝试另外一条执行路径
 2.2）直接 简单的继续
示例：
作为产生违例的一个简单示例，大家可思考一个名为t的对象句柄。
并且是尚未初始化的句柄。那么其违例控制就是
if(t == null)
throw new NullPointerException();
这样便“掷”出了一个违例。
在当前场景中，它使我们能放弃进一步解决该问题的企图。该问题会被转移到其他更恰当的地方解决。


 
