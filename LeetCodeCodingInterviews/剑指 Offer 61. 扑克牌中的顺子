//第一版 直接崩 没有理解对题意
执行结果：
解答错误
输入：
[0,0,1,2,5]
输出：
false
预期结果：
true
class Solution {
    public boolean isStraight(int[] nums) {
        if(nums[1] == nums[0] + 1 
        && nums[2] == nums[1] + 1
        && nums[3] == nums[2] + 1
        && nums[4] == nums[3] + 1)
        return true;
        return false;
    }
}

//第二版
但是出错在样例
115 / 203 个通过测试用例
状态：解答错误
提交时间：3 分钟前
最后执行的输入：
[0,0,2,2,5]
于是修改如第三版

class Solution {
    public boolean isStraight(int[] nums) {
    /*
    先排序 
    然后 找到非0的最小值
    维护的有
    1）nums[]
    2）0的数
    3）当前的数下标
    思路：
    当前数的下个数与当前数差距大于0的数量 false 否则就将0的数量减去差距
    然后开始下一个数 直到当前数下标为4
    */
    int zero = 0;
    for(int i = 0; i < nums.length; i++){
        if(nums[i] == 0){
            swap(nums[i], nums[zero]);
            zero++;
        }
    }
    for(int i = zero; i < nums.length; i++){
        for(int j = i+1; j < nums.length; j++){
            if(nums[i] > nums[j])
                swap(nums[i], nums[j]);
        }
    }//排序
    for(int i = zero; i < nums.length - 1; i++){
        zero = zero - (nums[i+1] - nums[i] - 1);
        if(zero < 0)
            break;
    }
    if(zero < 0)
        return false;
    return true;
    }
    void swap(int a, int b){
        int temp = a;
        a = b; 
        b = temp;
    }
}

//第三版
相较于第二版 修改在代码 A 处
起到一个排除相同数带来的问题
但是有了新的问题
196 / 203 个通过测试用例
状态：解答错误
提交时间：5 分钟前
最后执行的输入：
[0,0,8,5,4]

问题在于参数传递问题！
我写在外面的函数无法对另外一个函数的参数进行改变！！！
全部改变之后见第五版

class Solution {
    public boolean isStraight(int[] nums) {
    int zero = 0;
    for(int i = 0; i < nums.length; i++){
        if(nums[i] == 0){
            swap(nums[i], nums[zero]);
            zero++;
        }
    }
    for(int i = zero; i < nums.length; i++){
        for(int j = i+1; j < nums.length; j++){
            if(nums[i] > nums[j])
                swap(nums[i], nums[j]);
        }
    }//排序
    
    
    for(int i = zero; i < nums.length - 1; i++){
        zero = zero - (nums[i+1] - nums[i] - 1 < 0 ? 100 : nums[i+1] - nums[i] - 1);···················A
        if(zero < 0)
            break;
    }
    if(zero < 0)
        return false;
    return true;
    }
    void swap(int a, int b){
        int temp = a;
        a = b; 
        b = temp;
    }
}

//第四版
难道我冒泡排序写的不对？ 换成Arrays.sort()直接过了
而且100%
class Solution {
    public boolean isStraight(int[] nums) {
    /*
    先排序 
    然后 找到非0的最小值
    维护的有
    1）nums[]
    2）0的数
    3）当前的数下标
    思路：
    当前数的下个数与当前数差距大于0的数量 false 否则就将0的数量减去差距
    然后开始下一个数 直到当前数下标为4
    */
    int zero = 0;
    for(int i = 0; i < nums.length; i++){
        if(nums[i] == 0){
            swap(nums[i], nums[zero]);
            zero++;
        }
    }
    Arrays.sort(nums);

    for(int i = zero; i < nums.length - 1; i++){
        zero = zero - (nums[i+1] - nums[i] - 1 < 0 ? 100 : nums[i+1] - nums[i] - 1);
        if(zero < 0)
            break;
    }
    if(zero < 0)
        return false;
    return true;
    }
    void swap(int a, int b){
        int temp = a;
        a = b; 
        b = temp;
    }
}

//第五版
或者是把数组传递进去，这样也可以改变 见第七版
执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
35.8 MB
, 在所有 Java 提交中击败了
46.37%
的用户
class Solution {
    public boolean isStraight(int[] nums) {
    int zero = 0;
    for(int i = 0; i < nums.length; i++){
        if(nums[i] == 0){
            nums[i] = nums[zero];
            nums[zero] = 0;
            zero++;
        }
    }
    for(int i = zero; i < nums.length; i++){
        for(int j = i+1; j < nums.length; j++){
            if(nums[i] > nums[j]){
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                //swap(i, j);
            }
                
        }
    }
    for(int i = zero; i < nums.length - 1; i++){
        zero = zero - (nums[i+1] - nums[i] - 1 < 0 ? 100 : nums[i+1] - nums[i] - 1);
        if(zero < 0)
            break;
    }
    if(zero < 0)
        return false;
    return true;
    }
}

//第六版 K神 巧妙！
执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
35.9 MB
, 在所有 Java 提交中击败了
38.00%
的用户
class Solution {
    public boolean isStraight(int[] nums) {
        int joker = 0;
        Arrays.sort(nums); // 数组排序
        for(int i = 0; i < 4; i++) {
            if(nums[i] == 0) joker++; // 统计大小王数量
            else if(nums[i] == nums[i + 1]) return false; // 若有重复，提前返回 false
        }
        return nums[4] - nums[joker] < 5; // 最大牌 - 最小牌 < 5 则可构成顺子
    }
}

//第七版
执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
36 MB
, 在所有 Java 提交中击败了
13.11%
的用户’
class Solution {
    public boolean isStraight(int[] nums) {
    /*
    先排序 
    然后 找到非0的最小值
    维护的有
    1）nums[]
    2）0的数
    3）当前的数下标
    思路：
    当前数的下个数与当前数差距大于0的数量 false 否则就将0的数量减去差距
    然后开始下一个数 直到当前数下标为4
    */
    int zero = 0;
    for(int i = 0; i < nums.length; i++){
        if(nums[i] == 0){
            swap(nums, i, zero);
            zero++;
        }
    }
    for(int i = zero; i < nums.length; i++){
        for(int j = i+1; j < nums.length; j++){
            if(nums[i] > nums[j])
                swap(nums, i, j);
        }
    }//排序
    for(int i = zero; i < nums.length - 1; i++){
        zero = zero - (nums[i+1] - nums[i] - 1 < 0 ? 100 : nums[i+1] - nums[i] - 1);
        if(zero < 0)
            break;
    }
    if(zero < 0)
        return false;
    return true;
    }
    void swap(int[] nums, int a, int b){
        int temp = nums[a];
        nums[a] = nums[b]; 
        nums[b] = temp;
    }
}
