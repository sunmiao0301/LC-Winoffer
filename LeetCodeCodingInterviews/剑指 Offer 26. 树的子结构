//第一版 未完成 我的思路分为两部：
1）找出A中与B根节点值一样的节点，命名为 found
2）用 found 和 B 来执行函数matchLeft 和 matchRight 以此判断 B 是否是 A 子树。
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubStructure(TreeNode A, TreeNode B) {
    //空树不是任何一个树的子结构
    //树怎么由一个[]组表示呢
    //判断B是不是A的子结构 所以B <= A
    TreeNode found = A;
    find_equal_B(B, found);
    return matchLeft(B, found) && matchRight(B, found);
    }
    public static boolean matchLeft(TreeNode B, TreeNode found){
        if(B.left != null && found.left != null && B.left.val= found.left.val)){
            return matchLeft(B.left, found.left) && matchRight(B.left, found.left); 
        }
        else if(B.left == null && A_sub.left == null){//不能合并 不然不能递归下一步？
            return true;
        }
        else{
            return false;
        }
    }
    public static boolean matchRight(TreeNode B, TreeNode found){
        if(B.right != null && found.right != null && B.right.val == found.right.val)){
            return matchLeft(B.right, found.right) && matchRight(B.right, found.right); 
        }
        else if(B.right == null && found.right == null){//不能合并 不然不能递归下一步？
            return true;
        }
        else{
            return false;
        }
    }
    //在这个函数的地方 引出了一个问题 就是遍历一棵树 找其中的一个节点值为已知值 x 的节点
    public static TreeNode find_equal_B(TreeNode B, TreeNode found){
        while(found.val != B.val){
            if(found.left == null && found.right == null)
                return ;
            else if(found.left == null)
                return find_equal_B(B, found.right);
            else if(found.right == null)
                return find_equal_B(B, found.left);
            else
                ...
        }
        return found;
    }
}

//第二版 我尝试使用flag进行简化 但是后来我发现这种方法没有考虑完全
在测试用例：
执行结果：
解答错误
输入：
[4,2,3,4,5,6,7,8,9]
[4,8,9]
输出：
false
预期结果：
true
时是不行的 因为树A中可能有多个和B根节点一致的节点。
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubStructure(TreeNode A, TreeNode B) {
        int flag = 0;
        return helper(A, B, flag);
    }
    public static boolean helper(TreeNode A, TreeNode B, int flag){
        if(A == null)
            return false;
        if(B == null)//约定空树不是任意一个树的子结构
            return false;

        if(A.val == B.val)
            flag = 1;
        if(flag == 0)
            return helper(A.left, B, flag) || helper(A.right, B, flag);

        if(flag == 1){//一旦flag == 1 接下来的B必须是A的子结构
            if(B.left == null && B.right == null && A.val == B.val)//进入了子结构判断模式 不代表A.val == B.val
                return true;
            else if(B.left == null && B.right == null && A.val != B.val)
                return false;
            else if(B.left == null && A.right.val == B.right.val)
                return helper(A.right, B.right, flag);
            else if(B.right == null && A.left.val == B.left.val)
                return helper(A.left, B.left, flag);
            else if(B.left != null && B.right != null && A.left != null && A.right != null)
                return helper(A.left, B.left, flag) && helper(A.right, B.right, flag);
            else
                return false;
        }
        return false;
    }
}

//第三版 昨晚洗澡的时候一直在想 终于想清楚了 秉持着可读性第一的原则 代码写的比较冗余
    我就感觉到 这个题应该是由两个递归来解决
    第一个递归是对A递归(称为递归A) 目的是找到A中各个与B根节点值一样的节点
    第二个递归是对B递归(称为递归B) 目的是对递归A中找到的 进行递归
    递归A之间应该是 并 
    递归B之间应该是 交
    在此基础上写好代码
    运行，果然一次成功
    再总结一下大致的思路：
    ·································
    对于找A中存在B根节点的 第一个递归——递归A
    我们分两种大情况，目前的A与B节点值是否相等，
    在大情况之下，还要分四种小情况，分别是：
    A左空右空
    A左空右不空
    A左不空右空
    A左不空右不空
    如此，就是2 * 4 = 8 种情况
    如果相等，我们肯定要让A, B进入一个递归B 这是必须的
    如果不相等，就不需要递归B
    在上面两种情况的基础上
    如果A左空右空，那么什么都不需要并
    如果A左空右不空，那么需要并上 A.right, B 的递归A
    如果A左不空右空，那么需要并上 A.left, B 的递归A
    如果A左不空右不空，那么需要并上 A.right, B 的递归A 再并上 A.left, B 的递归A
    ·································
    对于递归B
    我们应该以B为主要 因为A可以有B没有的 但是必须有B有的 也就是说B才是那个决定性因素
    以此，
    分以下四种情况
    如果B左空右空 恭喜 返回ture
    如果B左不空右空 那么A必须左不空 且A左值等于B左值 如果上述都满足 返回A.left 和 B.left 的递归B
    如果B左空右不空 那么A必须右不空 且A右值等于B右值 如果上述都满足 返回A.right 和 B.right 的递归B
    如果B左不空右不空 那么A必须左不空右不空 且A左值等于右左值 如果上述都满足 返回A.left 和 B.left 的递归B 交上 返回A.right 和 B.right 的递归B
    
    
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubStructure(TreeNode A, TreeNode B) {
    /*
    做到这 我就感觉到 这个题应该是由两个递归来解决
    第一个递归是对A递归(称为递归A) 目的是找到各个与B根节点值一样的节点
    第二个递归是对B递归(称为递归B) 目的是对前一个递归中找到的进行递归
    递归A之间应该是 并 
    递归B之间应该是 交 
    */
    if(B == null)//空树不是任意一个数的子结构
        return false;
    if(A == null)
        return false;
    return find_B_root_among_A(A, B);
    }
    public static boolean find_B_root_among_A(TreeNode A, TreeNode B){        
        if(A.val == B.val){
            if(A.left == null && A.right == null)
                return find_B_structure_among_A(A, B);
            if(A.left == null && A.right != null)
                return find_B_root_among_A(A.right, B) || find_B_structure_among_A(A, B);
            if(A.left != null && A.right == null)
                return find_B_root_among_A(A.left, B) || find_B_structure_among_A(A, B);
            if(A.left != null && A.right != null)
            return find_B_root_among_A(A.left, B) || find_B_root_among_A(A.right, B) || find_B_structure_among_A(A, B);
        }           
        if(A.val != B.val){
            if(A.left == null && A.right == null)
                return false;
            if(A.left == null && A.right != null)
                return find_B_root_among_A(A.right, B);
            if(A.left != null && A.right == null)
                return find_B_root_among_A(A.left, B);
            if(A.left != null && A.right != null)
                return find_B_root_among_A(A.left, B) || find_B_root_among_A(A.right, B);
        }
    return false;//
    }
    public static boolean find_B_structure_among_A(TreeNode A, TreeNode B){
        if(B.left == null && B.right == null){
            return true;
        }
        if(B.left != null && B.right == null){
            if(A.left != null && A.left.val == B.left.val)
                return find_B_structure_among_A(A.left, B.left);
            return false;
        }
        if(B.left == null && B.right != null){
            if(A.right != null && A.right.val == B.right.val)
                return find_B_structure_among_A(A.right, B.right);
            return false;
        }
        if(B.left != null && B.right != null){
            if(A.left != null && A.right != null && A.left.val == B.left.val && A.right.val == B.right.val)
                return find_B_structure_among_A(A.left, B.left) && find_B_structure_among_A(A.right, B.right);
            return false;
        }
    return false;//
    }
}

//第四版
作者：edelweisskoko
同理 但是写的更优雅 学习了
class Solution {
    private TreeNode B;
    public boolean isSubStructure(TreeNode A, TreeNode B) {
        if(B == null) return false;
        this.B = B;
        return dfs(A);
    }

    private boolean dfs(TreeNode nodeA){
        if(nodeA == null)
            return false;
        if(nodeA.val == B.val)
            if(helper(nodeA, B))
                return true;
        return dfs(nodeA.left) || dfs(nodeA.right);
    }

    private boolean helper(TreeNode nodeA, TreeNode nodeB){
        if(nodeB == null)
            return true;
        if(nodeA == null || nodeA.val != nodeB.val)
            return false;
        return helper(nodeA.left, nodeB.left) && helper(nodeA.right, nodeB.right);
    }
}

//第五版 高手
作者：jyd
class Solution {
    public boolean isSubStructure(TreeNode A, TreeNode B) {
        return (A != null && B != null) && (recur(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B));
    }
    boolean recur(TreeNode A, TreeNode B) {
        if(B == null) return true;
        if(A == null || A.val != B.val) return false;
        return recur(A.left, B.left) && recur(A.right, B.right);
    }
}
