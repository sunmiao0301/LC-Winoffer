//第一版 我的想法比较简单 就是用个返回boolean的函数 但是实际上是为了处理镜像问题 但是发现结果受多个看似不影响的值的影响？！
比如受到1处||还是&&的影响
比如受到2处true还是false的影响
后来我想到 java对返回值为boolean的值的处理是“见好就收”的，也就是说一旦能根据现有的值得到结果，它就不会再执行后面的了，比如
这就引出一个问题 怎么安排|| && true false 来使得每个递归都被执行
我思考了一下 应该是有两种路：
1）在||的情况下 true很容易确定 false最难确定（必须都是false） 所以可以是 || 与 false 搭配
2）在&&的情况下 false很容易确定 true最难确定（必须都是true） 所以可以是 && 与 true 搭配
在1）的情况下：
输入
[4,2,7,1,3,6,9]
输出
[4,7,2,9,9,3,3]
预期结果
[4,7,2,9,6,3,1]
在2）的情况下：
输入
[4,2,7,1,3,6,9]
输出
[4,7,2,9,9,3,3]
预期结果
[4,7,2,9,6,3,1]
看到这个结果，我就知道了我这种把新节点转接到原树上是不行的 会影响到原树
那么到这里 我想到的新的处理方案是：
1）新建一条全新的树
2）直接对原树进行变换 新建一个新结点作为temp 防止后镜像转换的节点丢失 内存泄漏
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode mirrorTree(TreeNode root) {
    //本题是新建一个树 还是在原来树的基础上做调换呢
    ////想了一下 好像不能新建 这题与之前的“合并两个排序的链表”是不一样的 那题的头结点只起到暂存的效果
    //先试试新建 递归可用吗 毕竟没返回
    TreeNode new_root = new TreeNode();
    new_root.val = root.val;
    boolean temp = mirror_Copy(root, new_root);
    return new_root;
    }
    public static boolean mirror_Copy(TreeNode root, TreeNode new_root){
        if(root.left != null && root.right != null){
            new_root.left = root.right;
            new_root.right = root.left;
            return mirror_Copy(root.left, new_root.right) || mirror_Copy(root.right, new_root.left);//```````````1````````````or &&
        }
        if(root.left != null && root.left == null){
            new_root.right = root.left;
            return mirror_Copy(root.left, new_root.right);
        }
        if(root.left == null && root.right != null){
            new_root.left = root.right;
            return mirror_Copy(root.right, new_root.left);
        }
        if(root.left == null && root.right == null)
            return false;//```````````2````````````or return false;
    return false;
    }
}

//第二版 想明白上面的问题之后 在第一版思想的基础下 第二版成功运行
执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
35.5 MB
, 在所有 Java 提交中击败了
96.85%
的用户
但是没想到怎么去递归才能不需要新建一个boolean变量 
第三版将完善 并作为关键技巧 理解
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode mirrorTree(TreeNode root) {
        if(root == null)
            return root;
        boolean bool = mirror_Copy(root);
        return root;
    }
    public static boolean mirror_Copy(TreeNode treeNode){
        if(treeNode.left != null && treeNode.right != null){
            TreeNode temp = new TreeNode();
            temp = treeNode.left;
            treeNode.left = treeNode.right;
            treeNode.right = temp;
            return mirror_Copy(treeNode.left) && mirror_Copy(treeNode.right);
        }
        if(treeNode.left != null && treeNode.right == null){
            treeNode.right = treeNode.left;
            treeNode.left = null;
            return mirror_Copy(treeNode.right);
        }
        if(treeNode.left == null && treeNode.right != null){
            treeNode.left = treeNode.right;
            treeNode.right = null;
            return mirror_Copy(treeNode.left); 
        }
        if(treeNode.left == null && treeNode.right == null)
            return true;
    return true;
    }
}

//第三版
想要直接返回TreeNode 以主函数为递归函数 在主函数中完成递归 最后返回root即可
重要的是怎么才能在之前不返回 最后返回root
如果像第二版一样用 if 肯定不行
必须要在内部只有一个 return 才行
//试着推了一下当root左空右不空时候的情况 是可以的
所以这类问题的难度实际上在于怎么处理null且不需要判断是否为空
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode mirrorTree(TreeNode root) {
        if(root == null)return null;
        TreeNode tmp = root.left;
        root.left = mirrorTree(root.right);
        root.right = mirrorTree(tmp);
        return root;
    }
}

//第四版 有人认为写对称更好 写法如下
1)
class Solution {
    public TreeNode mirrorTree(TreeNode root) {
        if(root == null)return null;
        TreeNode right_tmp = mirrorTree(root.right);
        TreeNode left_tmp = mirrorTree(root.left);
        root.left = right_tmp;
        root.right = left_tmp;
        return root;
    }
}

或是2)
class Solution {
    public TreeNode mirrorTree(TreeNode root) {
        if(root == null)return null;
        TreeNode right_tmp = mirrorTree(root.left);
        TreeNode left_tmp = mirrorTree(root.right);
        root.left = left_tmp;
        root.right = right_tmp;
        return root;
    }
}
