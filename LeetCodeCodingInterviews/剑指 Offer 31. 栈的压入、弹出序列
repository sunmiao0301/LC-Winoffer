//第一版 通过 但效果不好 明天再改
执行结果：
通过
执行用时：
4 ms
, 在所有 Java 提交中击败了
7.25%
的用户
内存消耗：
37.9 MB
, 在所有 Java 提交中击败了
85.56%
的用户
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
    //经典数据结构 栈 的课后习题
    //假设压入栈的所有数字均不相等
    //这里的压入序列指的是“只要压入即可”而不是“先全部压入”
    //我感觉 分析的重心不在于 哪些是对的（种类多） 而是哪些是不对的（种类少）
    //出错的可能性就是 之前没出去 但是在后面又先出去 一旦被压住 就不能再其之前出去
    //需要注意的是 压入顺序是否一定有序12345...？ 好像不一定
    //好像可以直接用栈来 完成这个算法
    //输入输出都是数组
    Stack<Integer> stack = new Stack<Integer>();
    int in = 0;
    int out = 0;
    while(in != pushed.length - 1 && out != popped.length){
        /*
        pushed 是 popped 的排列。所以不可能数字组成不一样
        分析几种可能：
        首先明确 一切活动都是以 出栈数组当前下标对应的值 决定
        1）出栈下标值 等于 入栈下标值（这一步必须且必然发生）
        此时 进了 又出 然后出栈下标值+1 入栈下标-1（这是第一步）
        此后，有两种可能
        1.1）出栈下标值 又等于 入栈下标值 继续出栈 下标值+1 入栈下标-1..
        1.2）出栈下标值 不等于 入栈下标值不变 入栈下标+2 继续比较..
        2）出栈下标值 不等于 入栈下标值
        此时 进了 不出 出栈下标不变 入栈下标+1
        直到...
        
        上面的分析都是建立在不用栈的前提上
        下面的代码实际上是用了栈的
         */
        stack.push(pushed[in]);
        while(popped[out] == stack.peek()){
            stack.pop();
            out++;
            if(stack.empty()){
                in++;
                if(in == pushed.length)
                    return true;
                stack.push(pushed[in]);
            }
                
            if(out == popped.length)
                break;
        }
        if(popped[out] != stack.peek()){
            //stack.push()
            in++;
        }
    }
    if(in == pushed.length - 1){
        stack.push(pushed[in]);
        while(!stack.empty()){
            if(stack.pop() == popped[out])
                out++;
            else
                return false;
        }

    }
    if(out == popped.length)//此处out = 1
        return true;
    return false;
    }
}

//第二版 可以看出 第一版的时间很差 
可能是要空间换空间 是用双栈吗
双栈写了一会 发现我写的双栈并没有简化的效果
但是可读性大大提升了
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        if(pushed.length == 0)
            return true;
        Stack<Integer> stack_pushed = new Stack<Integer>();
        Stack<Integer> stack_popped = new Stack<Integer>();····························B
        int in = 0;
        int out = 0;
        stack_pushed.push(pushed[in]);
        while(out != popped.length){···················································A
            //退出while循环有两种可能
            //1）true情况 此时 out = popped.length
            //2）false情况 out != popped.length
            //上述两种可能的否就是out != popped.length 
        if(stack_pushed.empty()){
            in++;
            if(in == pushed.length)//in == 5
                break;//退出口1 此时应该是in = 5 out = 4 因为最后一个没压进去 自然也没退出
            stack_pushed.push(pushed[in]);
        }
            if(!stack_pushed.empty()){
                if(stack_pushed.peek() == popped[out]){
                    stack_popped.push(stack_pushed.pop());
                    //stack_pushed.push(pushed[++in]);
                    out++;
                    continue;
                }
                else if(stack_pushed.peek() != popped[out]){
                    in++;
                    if(in == pushed.length)
                        break;//退出口2 此时要么就是false 要么就是最后一个才能打通
                    stack_pushed.push(pushed[in]);
                    continue;
                }
            }   
        }//退出口3 正常退出 返回true
        if(out == popped.length)//根据退出口1、2、3 我们可知
            return true;
        return false;

    }
}

//第三版 对第二版继续简化 发现
1）stack_popped其实没有用
2）while循环的判断条件也没有用
简化后如下
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        if(pushed.length == 0)
            return true;
        Stack<Integer> stack_pushed = new Stack<Integer>();
        int in = 0;
        int out = 0;
        stack_pushed.push(pushed[in]);
        while(true){
        if(stack_pushed.empty()){
            in++;
            if(in == pushed.length)//in == 5
                break;//退出口1 此时应该是in = 5 out = 4 因为最后一个没压进去 自然也没退出
            stack_pushed.push(pushed[in]);
        }
            if(!stack_pushed.empty()){
                if(stack_pushed.peek() == popped[out]){
                    stack_pushed.pop();
                    out++;
                    continue;
                }
                else if(stack_pushed.peek() != popped[out]){
                    in++;
                    if(in == pushed.length)
                        break;//退出口2 此时要么就是false 要么就是最后一个才能打通
                    stack_pushed.push(pushed[in]);
                    continue;
                }
            }   
        }
        if(out == popped.length)//根据退出口1、2我们可知
            return true;
        return false;
    }
}

//第四版 K神 
看到他们的思路 我才发现 我的解法实际上是复杂一些的 
因为他们理解的是 入栈的数据 是 从pushed[0] 到 pushed[pushed.length-1] 的有序整数
而我写的是考虑入栈数据也是乱的情况
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        Stack<Integer> stack = new Stack<>();
        int i = 0;
        for(int num : pushed) {
            stack.push(num);
            while(!stack.isEmpty() && stack.peek() == popped[i]) {
                stack.pop();
                i++;
            }
        }
        return stack.isEmpty();
    }
}

//在新的题意理解的基础上 我写出了第五版
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        Stack<Integer> stack = new Stack<Integer>();
        int index_popped = 0;
        for(int i = 0; i < pushed.length; i++){
            stack.push(pushed[i]);
            while(!stack.empty() && stack.peek() == popped[index_popped]){
                stack.pop();
                index_popped++;
            }
        }
        return stack.empty();
    }
}
