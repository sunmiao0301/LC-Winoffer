//第一版 递归+全局变量 一遍过
执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
38.6 MB
, 在所有 Java 提交中击败了
7.59%
的用户
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int depth = 0;//初始深度是1
    public int maxDepth(TreeNode root) {
        if(root == null)
            return depth;
        helper(root, 1);
        return depth;
    }
    void helper(TreeNode root, int d){
        if(d > depth)depth = d;
        if(root.left != null)
            helper(root.left, d+1);
        if(root.right != null)
            helper(root.right, d+1);
    }
}

//第二版 K神
1）递归法dfs
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}

2）层序遍历bfs
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        List<TreeNode> queue = new LinkedList<>() {{ add(root); }}, tmp;
        int res = 0;
        while(!queue.isEmpty()) {
            tmp = new LinkedList<>();
            for(TreeNode node : queue) {
                if(node.left != null) tmp.add(node.left);
                if(node.right != null) tmp.add(node.right);
            }
            queue = tmp;
            res++;
        }
        return res;
    }
}
