//第一版 通过 但是复杂度都不好
long 数组也比 int 数组多占用了很大的空间
第二版将改进

这一版需要注意两个地方
1） 
    需要推导取模与乘法之间的关系
    简单试了几个 好像和加法是一致的（加法在剑指offer斐波那契数列题中出现）
    也就是说：
    a = b * c
    则有
    a % 1000000007 = (b % 1000000007 * c % 1000000007) % 1000000007
2）
    long[] dp = new long[n + 1];//0 ~ n
    为什么是long 因为我发现如果是int 由于我写的关系式是：
    dp[i] = (3 * (dp[i - 3] % 1000000007)) % 1000000007;
    而int的范围是 -2147483648 ~ 2147483647
    所以当这个数字是一个接近于 1000000007 的数字时
    乘以 3 会导致大于 int 的范围继而出错
    所以用long
    由此也能看出改进方案就是 每次少乘一点？
    
执行结果：
通过
执行用时：
1 ms
, 在所有 Java 提交中击败了
9.41%
的用户
内存消耗：
35.4 MB
, 在所有 Java 提交中击败了
18.03%
的用户
class Solution {
    public int cuttingRope(int n) {
    /*
    需要推导取模与乘法之间的关系
    简单试了几个 好像和加法是一致的
    也就是说：
    a = b * c
    则有
    a % 1000000007 = (b % 1000000007 * c % 1000000007) % 1000000007
    
    题目如此一改
    好像只能通过动态规划解决而不能用递归了 
    因为递归是最后才得到结果
    不过如果从小到大递归好像可以
    尝试如下：

    */
    if(n == 2 || n == 3)return n - 1;
    long[] dp = new long[n + 1];//0 ~ n
    dp[2] = 2;
    dp[3] = 3;
    dp[4] = 4;
    for(int i = 5; i <= n; i++){
        dp[i] = (3 * (dp[i - 3] % 1000000007)) % 1000000007;
    }
    return (int)dp[n];
    }
}

//第二版 K神 1）和我第三版思路是一致的 2）需要数学和很好 比较难
大数求余解法：
大数越界： 当 a 增大时，最后返回的 3^a 大小以指数级别增长，可能超出 int32 甚至 int64 的取值范围，导致返回值错误。
大数求余问题： 在仅使用 int32 类型存储的前提下，正确计算 x^a 对 p 求余（即 x^a ⊙p ）的值。
解决方案： 
1）循环求余
2）快速幂求余
其中后者2）的时间复杂度更低，两种方法均基于以下求余运算规则推出：
(xy)⊙p=[(x⊙p)(y⊙p)]⊙p
分析链接：
https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/solution/mian-shi-ti-14-ii-jian-sheng-zi-iitan-xin-er-fen-f/

//第三版 自己写的不用dp数组存储的
思路很简单：
基于上面贪心的分析 这道题其实就是：
当 n = 2 / 3 结果是 1 / 2
当 n = 4 结果是 4
当 n > 4 时（while 循环）
多次把 n - 3 每次减出一个3 就对返回值ret * 3 并且取余1000000007
当不满足 n > 4 时 就乘 n 再取余1000000007 
返回 ret 即可

执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
35.2 MB
, 在所有 Java 提交中击败了
46.75%
的用户


class Solution {
    public int cuttingRope(int n) {
    if(n == 2 || n == 3)return n - 1;
    long ret = 1;
    while(n > 4){//巧妙使得n == 4时结果为4
        ret = 3 * ret % 1000000007;
        n -= 3;
    }
    ret = ret * n % 1000000007;
    return (int)ret;
    }
}

//第四版
