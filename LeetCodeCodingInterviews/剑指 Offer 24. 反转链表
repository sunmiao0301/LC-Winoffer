//第一版 由于Leetcode给定的ListNode 定义是内置的 没有给add函数 所以可知我们是不能新建一个链表的 所以第一版不能运行成功
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }

 public static void add(int val) {//改部分未给 自己加的 不生效
		ListNode newNode = new ListNode(val);
		if(this.next == null)
			this.next = newNode;
		else
			this.next.add(val);
	}
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode temp = head;
        //输出: 5->4->3->2->1->NULL(最后需要补上一个NULL么)
        int length = 1;
        while(temp.next != null){
            length++;
            temp = temp.next;
        }
        int[] arr = new int[length];
        arr[length - 1] = temp.val;
        int i = 0;
        while(head.next != null){//i < length
            arr[i++] = head.val;
            head = head.next;
            //i++;
        }
        ListNode reverse = new ListNode(arr[0]);//怎么初始化一个ListNode
        //reverse.val = arr[0];
        ListNode temp_reverse = reverse;
        for(i = 1; i < length; i++){
            //temp_reverse = temp_reverse.next;
            
            temp_reverse.add(arr[i]);
            temp_reverse = temp_reverse.next;
        }
        return reverse;
    }
    
}

//第二版 标准思路 双指针 看了下思路然后自己写的
在这道题的时候 把循环外面的两行代码顺序写反 就会不对：
把
ListNode newhead = head;
head = head.next;
newhead.next = null;
写成了
ListNode newhead = head;
newhead.next = null;
head = head.next;
就会导致
head 的 next 变成 null
在此我就产生了一个疑问：“ListNode temp = head”，究竟是怎么一个过程，是是新建了一整个链表？还是新建了一个头节点指向head的next？或者是和head共享了原来的头节点？这将在我考完试之后在数据结构存储库中解决。
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null){
            return null;
        }
        ListNode temp = head;
        ListNode newhead = head;
        head = head.next;
        newhead.next = null;
        while(head != null){
            temp = head;
            head = head.next;
            temp.next = newhead;
            newhead = temp;
        }
    return newhead;
    }
}

//第三版 官方题解 更优雅
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}
复杂度分析：
时间复杂度：O(n)O(n)，其中 nn 是链表的长度。需要遍历链表一次。
空间复杂度：O(1)O(1)。

//第四版 官网题解 递归
class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode newHead = reverseList(head.next);
        head.next.next = head;
        head.next = null;
        return newHead;
    }
}
复杂度分析
时间复杂度：O(n)O(n)，其中 nn 是链表的长度。需要对链表的每个节点进行反转操作。
空间复杂度：O(n)O(n)，其中 nn 是链表的长度。空间复杂度主要取决于递归调用的栈空间，最多为 nn 层。
