//第一版
执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
36.7 MB
, 在所有 Java 提交中击败了
13.73%
的用户

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
    //首先要理解什么是对称 把对称的等价条件搞出来
    //通过一个递归函数 由于应该是需要两个参数 所以应该是需要重写一个函数的
    if(root == null)
        return true;
    return sub_isSymmetric(root.left, root.right);
    }
    public static boolean sub_isSymmetric(TreeNode left, TreeNode right){
        if(left == null && right == null)
            return true;
        if(left == null && right != null)
            return false;
        if(left != null && right == null)
            return false;
        if(left.val == right.val)
            return sub_isSymmetric(left.left, right.right) && sub_isSymmetric(left.right, right.left);
        return false;
    }
}

//第二版 在第一版的基础上略作优化
class Solution {
    public boolean isSymmetric(TreeNode root) {
    //首先要理解什么是对称 把对称的等价条件搞出来
    //通过一个递归函数 由于应该是需要两个参数 所以应该是需要重写一个函数的
    if(root == null)
        return true;
    return sub_isSymmetric(root.left, root.right);
    }
    public static boolean sub_isSymmetric(TreeNode left, TreeNode right){
        if(left == null && right == null)
            return true;
        if(left == null || right == null)
            return false;
        if(left.val == right.val)
            return sub_isSymmetric(left.left, right.right) && sub_isSymmetric(left.right, right.left);
        return false;
    }
}

//糕手版本 强行简化
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return root == null ? true : recur(root.left, root.right);
    }
    boolean recur(TreeNode L, TreeNode R) {
        if(L == null && R == null) return true;
        if(L == null || R == null || L.val != R.val) return false;
        return recur(L.left, R.right) && recur(L.right, R.left);
    }
}
作者：jyd
