//第一版 最后一个用例超时
原因：普通栈的 push() 和 pop() 函数的复杂度为 O(1)；而获取栈最小值 min() 函数需要遍历整个栈，复杂度为 O(N)。
提交记录
19 / 19 个通过测试用例
状态：超出时间限制
提交时间：几秒前
class MinStack {
    Stack<Integer> stack_main = new Stack<Integer>();
    Stack<Integer> stack_temp = new Stack<Integer>();
    /** initialize your data structure here. */
    public MinStack() {
    //数据结构的初始化
        
    }
    
    public void push(int x) {
        stack_main.push(x);
    }
    
    public void pop() {
        stack_main.pop();
    }
    
    public int top() {
        int top = stack_main.pop();
        stack_main.push(top);
        return top;
    }
    
    public int min() {
        int minimun = stack_main.pop();
        int temp = minimun;
        stack_temp.push(minimun);

        while(!stack_main.empty()){
            temp = stack_main.pop();
            if(minimun > temp)
                minimun = temp;
            stack_temp.push(temp);
        }
        while(!stack_temp.empty())
            stack_main.push(stack_temp.pop());
        return minimun;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.min();
 */
 
 //第二版 看了题解思路之后的写法 
 首先需要注意的是top可以用peek来代替
 但是如果只是第二版这样的写法 会在第14个测试用例时出错 问题如下
执行结果：
解答错误
输入：
["MinStack","push","push","push","push","pop","min","pop","min","pop","min"]
[[],[512],[-1024],[-1024],[512],[],[],[],[],[],[]]
输出：
[null,null,null,null,null,null,-1024,null,-1024,null,-1024]
预期结果：
[null,null,null,null,null,null,-1024,null,-1024,null,512]
问题出在 A 处，这里涉及到一个深层的问题 涉及到pop() peek()方法 返回的都是 Object 对象 如果直接用 == 就是在比较引用地址
如果在[-128,127]会被cache缓存,超过这个范围则比较的是对象是否相同 就出错了
对于该问题，测试结果如下：
Integer a = 10; Integer b = 10; System.out.println(a==b); //返回的是true
Integer a = 1000; Integer b = 1000; System.out.println(a==b); //返回是false
有人会问 B 处不也是 直接使用了 >= 吗
b.peek()出来的是object x是int
int1 == obejct2 触发自动拆箱，obejct2 -> Integer2 -> int2，（PS：触发自动拆箱的前提是 注意这里面需要Stack<Integer>申明送入的数据是Integer int1 == int2就是比较值了）
此外 B处 >= 也需要注意
举个实例
如果初始 push 入 MinStack 的是533 那么如果不是 >= 而是 > 辅助栈B内容就是53 那么此时
如果后续的操作是先pop
主栈A就是 53 辅助栈就是5 此时如果再min 就会得到错误结果5 但是实际上应该返回的正确答案是 3

 class MinStack {
    //思路很奇妙 把主栈中的数据 取 当呈降序的数
    //注意：min()函数只是返回这个最小值 而不取出这个最小值
    //由此 不同的函数通过不同栈来实现：
    //push综合考虑两个栈
    //pop综合考虑两个栈
    //top只对主栈
    //min只需通过辅助栈即可实现
    //要想到这个思路 关键在于认识到栈原先都是空的，压栈之后才开始有数
    Stack<Integer> stack_main,stack_temp;
    /** initialize your data structure here. */
    public MinStack() {
        stack_main = new Stack<Integer>();
        stack_temp = new Stack<Integer>();
    }

    public void push(int x) {
        stack_main.push(x);
        if(stack_temp.empty())
            stack_temp.push(x);
        else if(!stack_temp.empty()){
            if(stack_temp.peek() >= x)//·················································B
                stack_temp.push(x);
        }
    }
    
    public void pop() {
        if(stack_temp.peek() == stack_main.pop())········································A
            stack_temp.pop();
    }
    
    public int top() {
        return stack_main.peek();
    }
    
    public int min() {
        return stack_temp.peek();//注意min()函数不取出 只是返回即可 所以peek()而不是pop()
    }
}

//第三版 改正后的答案 通过 但是都低于30%
class MinStack {
    //思路很奇妙 把主栈中的数据 取 当呈降序的数
    //注意：min()函数只是返回这个最小值 而不取出这个最小值
    //由此 不同的函数通过不同栈来实现：
    //push综合考虑两个栈
    //pop综合考虑两个栈
    //top只对主栈
    //min只需通过辅助栈即可实现
    //要想到这个思路 关键在于认识到栈原先都是空的，压栈之后才开始有数
    Stack<Integer> stack_main,stack_temp;
    /** initialize your data structure here. */
    public MinStack() {
        stack_main = new Stack<Integer>();
        stack_temp = new Stack<Integer>();
    }

    public void push(int x) {
        stack_main.push(x);
        if(stack_temp.empty())
            stack_temp.push(x);
        else if(!stack_temp.empty()){
            if(stack_temp.peek() >= x)//
                stack_temp.push(x);
        }
    }
    
    public void pop() {
        if(stack_temp.peek().equals(stack_main.pop()))
            stack_temp.pop();
    }
    
    public int top() {
        return stack_main.peek();
    }
    
    public int min() {
        return stack_temp.peek();//注意min()函数不取出 只是返回即可 所以peek()而不是pop()
    }
}

//第四版 优化后的题解
执行结果：
通过
执行用时：
21 ms
, 在所有 Java 提交中击败了
99.25%
的用户
内存消耗：
40 MB
, 在所有 Java 提交中击败了
94.74%
的用户
class MinStack {
    //思路很奇妙 把主栈中的数据 取 当呈降序的数
    //注意：min()函数只是返回这个最小值 而不取出这个最小值
    //由此 不同的函数通过不同栈来实现：
    //push综合考虑两个栈
    //pop综合考虑两个栈
    //top只对主栈
    //min只需通过辅助栈即可实现
    //要想到这个思路 关键在于认识到栈原先都是空的，压栈之后才开始有数
    Stack<Integer> stack_main,stack_temp;
    /** initialize your data structure here. */
    public MinStack() {
        stack_main = new Stack<Integer>();
        stack_temp = new Stack<Integer>();
    }

    public void push(int x) {
        stack_main.push(x);
        if(stack_temp.empty() || stack_temp.peek() >= x)
            stack_temp.push(x);
        
    }
    
    public void pop() {
        if(stack_temp.peek().equals(stack_main.pop()))
            stack_temp.pop();
    }
    
    public int top() {
        return stack_main.peek();
    }
    
    public int min() {
        return stack_temp.peek();//注意min()函数不取出 只是返回即可 所以peek()而不是pop()
    }
}

//第五版 K神压行题解 
class MinStack {
    Stack<Integer> A, B;
    public MinStack() {
        A = new Stack<>();
        B = new Stack<>();
    }
    public void push(int x) {
        A.add(x);
        if(B.empty() || B.peek() >= x)
            B.add(x);
    }
    public void pop() {
        if(A.pop().equals(B.peek()))
            B.pop();
    }
    public int top() {
        return A.peek();
    }
    public int min() {
        return B.peek();
    }
}
