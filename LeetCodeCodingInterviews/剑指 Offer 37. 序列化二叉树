//看了题目 我发现 这二叉树的返回值 null 的深度是根据最深的来得 那我感觉是不是就得加个深度的标记flag之类的 后面再考虑。
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    // Encodes a tree to a single string.
    Queue<TreeNode> queue = new LinkedList<>();
    String ret = "[";
    public String serialize(TreeNode root) {
    /*
    对树 有深度优先和广度优先

    对于深度优先 可以用递归和非递归 
    对于递归深度优先 又有三种方式：前序遍历 中序遍历 后序遍历
    对于非递归深度优先 借助的数据结构是栈

    对于广度优先 只可以用非递归
    对于非递归广度优先 借助的数据结构是队列
    */
    if(root == null)
        return "[null]";

    queue.offer(root);
    
    //element() 和 peek() 用于在队列的头部查询元素。与 remove() 方法类似，在队列为空时， element() 抛出一个异常，而 peek() 返回 null。
    }
    String serialize_helper(Queue queue){
        if(queue.peek() == null){
            ret = ret.substring(ret.length() - 1);//往字符串加就加“char,”即可
            ret = ret + "]";
            return ret;
        }
        TreeNode temp = queue.poll();
        s = s + temp.val + ",";
        if(temp.left == null)
            s = s + "null,";
        else{
            s = s + temp.left.val + ",";
            queue.offer(temp.left);
        }
        if(temp.right == null)
            s = s + "null,";
        else{
            s = s + temp.right.val + ",";
            queue.offer(temp.left);
        }
    }




    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
