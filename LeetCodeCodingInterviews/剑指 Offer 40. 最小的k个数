//第一版 暴力
执行结果：
通过
执行用时：
8 ms
, 在所有 Java 提交中击败了
68.01%
的用户
内存消耗：
39.8 MB
, 在所有 Java 提交中击败了
39.48%
的用户
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        int[] ret = new int[k];
        Arrays.sort(arr);
        for(int i = 0; i < k; i++){
            ret[i] = arr[i];
        }
        return ret;
    }
}

//第二版
执行结果：
解答错误
输入：
[0,1,1,2,4,4,1,3,3,2]
6
输出：
[0,1,1,1,2,3]
预期结果：
[0,1,1,1,2,2]
应该是最后一个数没有被考虑 不然不会少一个 2 的
果然在A处 有问题
int[] temp_arr = Arrays.copyOfRange(arr, 0, right_s);·······················A
这里的right_s是arr.length - 1（因为在递归helper中是作为数组下标使用）
但是如果是走的是B这条路 那么问题就出现了 因为这条路的函数copyOfRange的第三个参数是要拷贝的数组的长度 此时如果是使用（right_s）arr.length - 1 就少了一个数
改正后为第三版
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        if(k == 0)
            return new int[0];
        if(arr.length <= k)
            return arr;
        int left = 0;
        int right = arr.length - 1;
        return helper(arr, left, right, k, right);
    }
    int[] helper(int[] arr, int left, int right, int k, int right_s){
        int temp = arr[left];
        while(left < right){//等于的时候都可以退出
            while(left < right && arr[right] >= temp){
                right--;
            }
            if(left == right){
                arr[left] = temp;
                break;
            }
            arr[left] = arr[right];
            left++;
            while(left < right && arr[left] <= temp){
                left++;
            }
            if(left == right){
                arr[left] = temp;
                break;
            }
            arr[right] = arr[left];
            right--;
        }
        if(left <= k - 1){
            if(left == k - 1){
                return Arrays.copyOfRange(arr, 0, k);
            }
            if(left < k - 1){·······························································B
                int[] temp_arr = Arrays.copyOfRange(arr, 0, right_s);·······················A
                Arrays.sort(temp_arr);
                return Arrays.copyOfRange(temp_arr, 0, k);
            }
        }
        return helper(arr, 0, left, k, right_s);
    }
}

//第三版
执行结果：
通过
执行用时：
8 ms
, 在所有 Java 提交中击败了
68.01%
的用户
内存消耗：
39.6 MB
, 在所有 Java 提交中击败了
79.40%
的用户
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        if(k == 0)
            return new int[0];
        if(arr.length <= k)
            return arr;
        int left = 0;
        int right = arr.length - 1;
        return helper(arr, left, right, k, right);
    }
    int[] helper(int[] arr, int left, int right, int k, int right_s){
        int temp = arr[left];
        while(left < right){//等于的时候都可以退出
            while(left < right && arr[right] >= temp){
                right--;
            }
            if(left == right){
                arr[left] = temp;
                break;
            }
            arr[left] = arr[right];
            left++;
            while(left < right && arr[left] <= temp){
                left++;
            }
            if(left == right){
                arr[left] = temp;
                break;
            }
            arr[right] = arr[left];
            right--;
        }
        if(left <= k - 1){
            if(left == k - 1){
                return Arrays.copyOfRange(arr, 0, k);
            }
            if(left < k - 1){······················································A
                int[] temp_arr = Arrays.copyOfRange(arr, 0, right_s + 1);
                Arrays.sort(temp_arr);
                return Arrays.copyOfRange(temp_arr, 0, k);
            }
        }
        return helper(arr, 0, left, k, right_s);
    }
}

//第四版 
第三版的时空还不是很好的原因在于A处代码，没有继续用快排思想解决，而是直接使用的Arrays.sort()来解决了
下面是对第三版修正之后的结果：
但是在第五个样例处出了问题：
执行结果：
解答错误
输入：
[0,0,1,2,4,2,2,3,1,4]
8
输出：
[0,0,1,2,2,2,2,3]
预期结果：
[0,0,1,1,2,2,2,3]
居然多出了一个2。。。

最后发现是因为在退出循环C的时候没有注意把最后一个“空”填上
其次 我发现 AB处代码是没有必要改成<= >= 的

根据上面的分析 改正结果如第五版

class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        //int left = 0;
        //int right = arr.length - 1;
        if(k >= arr.length)
            return arr;
        return helper(0, arr.length - 1, arr, 0, arr.length - 1, k);
    }
    public int[] helper(int left, int right, int[] arr, int left_s, int right_s, int k){
        int temp = arr[left];
        while(left < right){·········································C
            while(left < right){//先用大的填左边的坑
                if(arr[right] <= temp){//····························A
                    arr[left] = arr[right];//右边出现坑
                    left++;
                    break;
                }
                right--;
            }
            while(left < right){//用小的填右边的坑
                if(arr[left] >= temp){//······························B
                    arr[right] = arr[left];//左边出现坑
                    right--;
                    break;
                }
                left++;
            }
        }
    if(left > k)
        return helper(left_s, right - 1, arr, left_s, right - 1, k);
    if(left < k - 1)
        return helper(left + 1, right_s, arr, left + 1, right_s, k);
    if(left == k || left == k - 1)
        return Arrays.copyOfRange(arr, 0, k);
    return new int[0];
    }
}

//第五版 时间很ok 但是空间上不是很好 模仿大神思路略作修改看看能否好些
执行结果：
通过
执行用时：
2 ms
, 在所有 Java 提交中击败了
99.54%
的用户
内存消耗：
39.9 MB
, 在所有 Java 提交中击败了
28.66%
的用户
炫耀一下:
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        if(k >= arr.length)
            return arr;
        return helper(0, arr.length - 1, arr, 0, arr.length - 1, k);
    }
    public int[] helper(int left, int right, int[] arr, int left_s, int right_s, int k){
        int temp = arr[left];//······························拿出一个坑
        while(left < right){
            while(left < right){//先用大的填左边的坑
                if(arr[right] < temp){
                    arr[left] = arr[right];//右边出现坑
                    left++;
                    break;
                }
                right--;
            }
            while(left < right){//用小的填右边的坑
                if(arr[left] > temp){
                    arr[right] = arr[left];//左边出现坑
                    right--;
                    break;
                }
                left++;
            }
        }
        arr[left] = temp;···································把最后一个空填上！
    if(left > k)
        return helper(left_s, right - 1, arr, left_s, right - 1, k);
    if(left < k - 1)
        return helper(left + 1, right_s, arr, left + 1, right_s, k);
    if(left == k || left == k - 1)
        return Arrays.copyOfRange(arr, 0, k);
    return new int[0];
    }
}

//第六版 模仿大神空间的思路 空间上略好一点
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        if(k >= arr.length)
            return arr;
        return helper(0, arr.length - 1, arr, k);
    }
    public int[] helper(int left, int right, int[] arr, int k){
        int temp = arr[left];//····························拿出一个坑
        int left_s = left;
        int right_s = right;
        while(left < right){
            while(left < right){//先用大的填左边的坑
                if(arr[right] < temp){//····························
                    arr[left] = arr[right];//右边出现坑
                    left++;
                    break;
                }
                right--;
            }
            while(left < right){//用小的填右边的坑
                if(arr[left] > temp){//······························
                    arr[right] = arr[left];//左边出现坑
                    right--;
                    break;
                }
                left++;
            }
        }
        arr[left] = temp;
    if(left > k)
        return helper(left_s, right - 1, arr, k);
    if(left < k - 1)
        return helper(left + 1, right_s, arr, k);
    return Arrays.copyOf(arr, k);
    }
}

//第七版 大神题解
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        if (k == 0 || arr.length == 0) {
            return new int[0];
        }
        // 最后一个参数表示我们要找的是下标为k-1的数
        return quickSearch(arr, 0, arr.length - 1, k - 1);
    }

    private int[] quickSearch(int[] nums, int lo, int hi, int k) {
        // 每快排切分1次，找到排序后下标为j的元素，如果j恰好等于k就返回j以及j左边所有的数；
        int j = partition(nums, lo, hi);
        if (j == k) {
            return Arrays.copyOf(nums, j + 1);
        }
        // 否则根据下标j与k的大小关系来决定继续切分左段还是右段。
        return j > k? quickSearch(nums, lo, j - 1, k): quickSearch(nums, j + 1, hi, k);
    }

    // 快排切分，返回下标j，使得比nums[j]小的数都在j的左边，比nums[j]大的数都在j的右边。
    private int partition(int[] nums, int lo, int hi) {
        int v = nums[lo];
        int i = lo, j = hi + 1;
        while (true) {
            while (++i <= hi && nums[i] < v);
            while (--j >= lo && nums[j] > v);
            if (i >= j) {
                break;
            }
            int t = nums[j];
            nums[j] = nums[i];
            nums[i] = t;
        }
        nums[lo] = nums[j];
        nums[j] = v;
        return j;
    }
}

