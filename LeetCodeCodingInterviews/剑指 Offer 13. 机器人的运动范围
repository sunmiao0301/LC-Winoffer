//第一版 只能跑通1 1 x 的测试样例 超出时间限制 最后看到这种揭发实际上是错的
class Solution {
    public int movingCount(int m, int n, int k) {
    //m行n列 横着检索 暴力的话 效率一般
    int ret = 0;
    for(int row = 0; row < m; row++){//竖着先不动
        for(int col = 0; col < n; col++){//先走横着
            int sum = 0;
            while(row != 0){
                sum += row % 10;
                row = row / 10;
            }
            while(col != 0){
                sum += col % 10;
                col = col / 10;
            }
            if(sum <= k){
                ret++;
            }else{
                break;
            }
        }
    }
    return ret;
    }
}

//第二版 试试DFS + 剪枝
执行结果：
通过
显示详情
添加备注

执行用时：
1 ms
, 在所有 Java 提交中击败了
84.06%
的用户
内存消耗：
35.4 MB
, 在所有 Java 提交中击败了
65.35%
的用户
class Solution {
    public int movingCount(int m, int n, int k) {
        int visit[][] = new int[m][n];
        if( m == 0 && n == 0){
            return 1;//因为0 <= k <= 20
        }
        return finder(0, 0, k, m, n, visit);
    }

    public static int finder(int col, int row, int k, int m, int n, int[][] visit){
        if(col >= m || row >= n){
            return 0;//void 函数返回空的即可
        }
        if(visit[col][row] == 0 && getsum(col, row) <= k){
            visit[col][row] = 1;
            return finder(col + 1, row, k, m, n, visit) + finder(col, row + 1, k, m, n, visit) + 1;
        }else if(visit[col][row] == 1){
            return 0;
        }else if(getsum(col, row) > k){
            visit[col][row] = 1;
            return 0;
        }
        return -1;
    }

    public static int getsum(int col, int row){
        int sum = 0;
        while(col != 0){
            sum += col % 10;
            col /= 10;
        }
        while(row != 0){
            sum += row % 10;
            row /= 10;
        }
        return sum;
    }
}
