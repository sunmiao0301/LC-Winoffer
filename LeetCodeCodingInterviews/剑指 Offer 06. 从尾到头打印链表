//栈这种线性、逻辑结构是先进后出，正好避免了链表无法倒序的不足。

//第一版（错误） 输入输出情况：
已完成
执行用时：0 ms
输入
[1,3,2]
输出
[2,3,0]
预期结果
[2,3,1]
造成这样的原因是第一个结点的值没读进去 解决办法是把
int[] ret = new int[stack.size()];
改成
int size = stack.size();
int[] ret = new int[size];
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] reversePrint(ListNode head) {
    //题干中（用数组返回）
    //链表长度没有方法 只能遍历得到
    //看了思路 一是递归法 二是用栈
    //先栈试试
    Stack<Integer> stack = new Stack<Integer>();
    ListNode p = head;//能否省略
    while(p != null){
        stack.push(p.val);//
        p = p.next;
    }
    int[] ret = new int[stack.size()];
    for(int i = 0; i < stack.size(); i++){
        ret[i] = stack.pop();
    }
    return ret;
    }
}

//第二版
执行结果：
通过
显示详情
执行用时：
2 ms
, 在所有 Java 提交中击败了
37.81%
的用户
内存消耗：
38.7 MB
, 在所有 Java 提交中击败了
96.43%
的用户
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] reversePrint(ListNode head) {
    //题干中（用数组返回）
    //链表长度没有方法 只能遍历得到
    //看了思路 一是递归法 二是用栈
    //先栈试试
    Stack<Integer> stack = new Stack<Integer>();
    ListNode p = head;//能否省略
    while(p != null){
        stack.push(p.val);//
        p = p.next;
    }
    //int[] ret = new int[stack.size()];
    int size = stack.size();
    int[] ret = new int[size];
    for(int i = 0; i < size; i++){
        ret[i] = stack.pop();
    }
    return ret;
    }
}

//第三版 以链表结点为元素的栈
执行结果：
通过
显示详情
执行用时：
2 ms
, 在所有 Java 提交中击败了
37.81%
的用户
内存消耗：
39.2 MB
, 在所有 Java 提交中击败了
35.51%
的用户
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] reversePrint(ListNode head) {
    Stack<ListNode> stack = new Stack<ListNode>();
    ListNode p = head;
    while(p != null){
        stack.push(p);
        p = p.next;
    }
    int size = stack.size();
    int[] ret = new int[size];
    for(int i = 0; i < size; i++){
        ret[i] = stack.pop().val;
    }
    return ret;
    }
}

//第四版 递归法
