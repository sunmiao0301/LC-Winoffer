··················本题既可以用动态规划 也可以用递归························
//第一版 自己套用递归回溯模板写的 可惜卡在了第36个样例
36 / 49 个通过测试用例
状态：解答错误
提交时间：几秒前
最后执行的输入：
506
执行结果：
解答错误
输入：
506
输出：
2
预期结果：
1
原因是05被判断为不能“翻译”成字母 所以得加个条件。
修改后见第二版

class Solution {
    int ret = 0;
    public int translateNum(int num) {
    //这题看似与字母相关，其实好像只需要判断当前的一位数或是两位数是否是在0 ~ 25 之间
    //先试试用递归回溯
    String s = "" + num;
    helper(0, s);
    return ret;
    }
    void helper(int index, String s){
        if(index == s.length()){
            ret++;
            return;
        }
        for(int i = 1; i < 3; i++){
            if(index + i <= s.length() && Integer.parseInt(s.substring(index, index + i)) >= 0 && Integer.parseInt(s.substring(index, index + i)) <= 25){//后面的两个是为i == 2准备的
                index += i;
                helper(index, s);
                index -= i;
            }
        }
        
    }
}

第二版
执行结果：
通过
执行用时：
5 ms
, 在所有 Java 提交中击败了
9.93%
的用户
内存消耗：
35.3 MB
, 在所有 Java 提交中击败了
29.50%
的用户
class Solution {
    int ret = 0;
    public int translateNum(int num) {
    //这题看似与字母相关，其实好像只需要判断当前的一位数或是两位数是否是在0 ~ 25 之间
    //先试试用递归回溯
    String s = "" + num;
    helper(0, s);
    return ret;
    }
    void helper(int index, String s){
        if(index == s.length()){
            ret++;
            return;
        }
        for(int i = 1; i < 3; i++){
            if(index + i <= s.length()){//后面的两个是为i == 2准备的
                if(i == 1){
                    index += i;
                    helper(index, s);
                    index -= i;
                }
                if(i == 2 && Integer.parseInt(s.substring(index, index + i)) >= 10 && Integer.parseInt(s.substring(index, index + i)) <= 25){
                    index += i;
                    helper(index, s);
                    index -= i;
                }
                
            }
        }
        
    }
}

ps 递归回溯模板
https://blog.csdn.net/abcdef314159/article/details/108583980
private void backtrack("原始参数") {
    //终止条件(递归必须要有终止条件)
    if ("终止条件") {
        //一些逻辑操作（可有可无，视情况而定）
        return;
    }

    for (int i = "for循环开始的参数"; i < "for循环结束的参数"; i++) {
        //一些逻辑操作（可有可无，视情况而定）

        //做出选择

        //递归
        backtrack("新的参数");
        //一些逻辑操作（可有可无，视情况而定）

        //撤销选择
    }
}

//第三版 动态规划 自己写的 效果也不好
ps： 从前还是从后推导效果是一样的
执行结果：
通过
执行用时：
5 ms
, 在所有 Java 提交中击败了
9.94%
的用户
内存消耗：
35.5 MB
, 在所有 Java 提交中击败了
12.75%
的用户
class Solution {
    public int translateNum(int num) {
    /*
    动态规划
    对于长度为i的数字字符串
    f(i) 
    = f(i - 1) = f(i - 2)//当最后两位不能联合翻译
    = f(i - 2) + f(i - 1)//当最后两位能联合翻译
    从头还是从尾开始？
    我这个是从尾开始 好像不对
    但是又感觉结果是一样的
    */
    String s = "" + num;
    return helper(s.length() - 1, s);
    }
    int helper(int len, String s){    
        if(len == 0)return 1;
        int ten_bit = s.charAt(len - 1) - 48;
        int one_bit = s.charAt(len) - 48;
        if(len == 1){
            if(ten_bit * 10 + one_bit >= 10 && ten_bit * 10 + one_bit <= 25)
                return 2;
            return 1;
        }
        if(ten_bit * 10 + one_bit >= 10 && ten_bit * 10 + one_bit <= 25)
            return helper(len - 2, s) + helper(len - 1, s);
        else
            return helper(len - 1, s);//注意是len - 1 不是 len - 2
        
    }
}

//第四版 对第三版优化了一下 效果不错 很优雅 甚至感觉比一些题解还好
执行结果：
通过
显示详情
添加备注
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
35.1 MB
, 在所有 Java 提交中击败了
74.87%
的用户
class Solution {
    public int translateNum(int num) {
    /*
    动态规划
    第二版
    从后向前来
    1225
    ···
    122
    12
    ···
    12
    1+
    1+
    0+
    ···
    1+
    0+
    1+
    1+
    0+
    ···
    5
    从前往后来
    2258
    258
    ···
    258
    58
    58
    8
    ···
    58+
    8+
    +
    +
    +
    ···
    =5
    一样
    */
    return helper(num);
    }
    int helper(int num){    
        //int ten_bit = num % 100;
        //int one_bit = num % 10;
        if(num % 10 == num || num == 0)//只剩一位数或者0位
            return 1;
        if(num % 100 >= 10 && num % 100 <= 25)//两位数可以翻译
            return helper(num / 100) + helper(num / 10);
        else//两位数不可翻译
            return helper(num / 10);
    }      
}

//第五版 K神
https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/solution/mian-shi-ti-46-ba-shu-zi-fan-yi-cheng-zi-fu-chua-6/
