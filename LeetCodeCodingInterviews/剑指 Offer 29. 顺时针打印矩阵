//第一版 这么写的话参数太多了
class Solution {
    public int[] spiralOrder(int[][] matrix) {
    //主要是转向问题 可以通过一个visited数组(或是一个每转一圈就--的参数) 和 四个方向的函数来完成
    int[] ret = new int[matrix.length * matrix[].length];
    int flag_left_to_right = matrix[].length;
    int flag_up_to_down = matrix.length;
    int flag_right_to_left = 0;
    int flag_down_to_up = 0;

    int temp_left_to_right = 0;
    int temp_up_to_down = 0;
    int temp_right_to_left = matrix[].length;
    int temp_down_to_up = matrix.length;

    int row = 0;//行（高度）
    int col = 0;//列（宽度）
    for(i = 0; i < matrix.length * matrix[].length; i++){
        
        
        i++;
    }
    }
    public static left_to_right(int row, int col, int flag_left_to_right){
        
    }
}

//第二版
换成用visit来存储 但是遇到一个问题
究其原因是因为各个函数之间都是互相的局部变量
比如：
func_A(...){
int a = 1;
int err = func_B(a);
}
func_B(int a){
a = 2;
}
这样a最终结果是1 而不是2
因为a是func_A中的局部变量 不能被func_B改变
下面是我原来的写法 这样运行得不到结果 无论
int col = 0;
int row = 0;
放在类里面 还是放到函数里面 都没法被函数go改变。。
··················································怎么修改 才能使得用函数的情况下 也能完成呢······················································································
基于此 我直接将其统一为一个函数 作为第三版
class Solution {
    int col = 0;
    int row = 0;
    int flag = 1;//1为左到右 2为上到下 3为右到左 4为下到上
    public int[] spiralOrder(int[][] matrix) {
    /*
    visit[][] 访问过的是1 没访问过的是0
    访问时如果撞到了1 就将方向调换
    可以写一个调转方向的函数
    参数
    */
    
    int[] ret = new int[matrix.length * matrix[0].length];
    int[][] visit = new int[matrix.length][matrix[0].length];

    for(int i = 0; i < matrix.length * matrix[0].length; i++){
        ret[i] = go(row, col, matrix, visit, flag);
    }
    return visit[0];
    }
    public static int go(int col, int row, int[][] matrix, int[][] visit, int flag){
        visit[row][col] = 1;
        if(flag == 1){
            if(visit[row][col+1] == 1 || col + 1 == matrix[0].length){//需要转向
                flag = flag % 4 + 1;//转向
                return matrix[row++][col];
            }else{//不需要转向
                return matrix[row][col++];}
        }
        if(flag == 2){
            if(visit[row+1][col] == 1 || row + 1 == matrix.length){
                flag = flag % 4 + 1;
                return matrix[row][col--];
            }else{
                return matrix[row++][col];}
        }
        if(flag == 3){
            if(visit[row][col-1] == 1 || col - 1 == -1){
                flag = flag % 4 + 1;
                return matrix[row--][col];
            }else{
                return matrix[row][col--];}
        }
        if(flag == 4){
            if(visit[row-1][col] == 1 || row - 1 == -1){
                flag = flag % 4 + 1;
                return matrix[row][col++];
            }else{
                return matrix[row--][col];}
        }
        return -1;
    }
}

//第三版 成功运行
这里运用到了Java 代码 ++ 操作的便利性
++i 和 i++ 的区别：
1）res[x++] 等价于先给 res[x] 赋值，再给 x 自增 11 ；
2）++t > b 等价于先给 t 自增 11 ，再判断 t > b 逻辑表达式。

作者：jyd
链接：https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/solution/mian-shi-ti-29-shun-shi-zhen-da-yin-ju-zhen-she-di/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
class Solution {
    public int[] spiralOrder(int[][] matrix) {
    /*
    visit[][] 访问过的是1 没访问过的是0
    访问时如果撞到了1 就将方向调换
    可以写一个调转方向的函数
    参数
    */
    if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
    //二维数组高度和宽度都为0 || 二维数组高度为0 || 二维数组宽度为0 注意顺序不能乱 必须先判断高度为0 因为最后一个条件“宽度为0”的前提条件是高度存在 （java的 || 是有先后顺序的）
            return new int[0];//都返回一个{0}
        }
    int col = 0;
    int row = 0;
    int flag = 1;//1为左到右 2为上到下 3为右到左 4为下到上
    int[] ret = new int[matrix.length * matrix[0].length];
    int[][] visit = new int[matrix.length][matrix[0].length];
    for(int i = 0; i < matrix.length * matrix[0].length; i++){
        visit[row][col] = 1;
        if(flag == 1){
            if(col + 1 == matrix[0].length){//需要转向
                flag = flag % 4 + 1;//转向
                ret[i] = matrix[row++][col];
                continue;
            }
            else if(visit[row][col+1] == 1){
                flag = flag % 4 + 1;//转向
                ret[i] = matrix[row++][col];
                continue;
            }
            else{//不需要转向
                ret[i] = matrix[row][col++];
                continue;
            }
        }
        if(flag == 2){
            if(row + 1 == matrix.length){
                flag = flag % 4 + 1;
                ret[i] = matrix[row][col--];
                continue;
            }
            else if(visit[row+1][col] == 1){
                flag = flag % 4 + 1;
                ret[i] = matrix[row][col--];
                continue;
            }
            else{
                ret[i] = matrix[row++][col];
                continue;
                }
        }
        if(flag == 3){
            if(col - 1 == -1){
                flag = flag % 4 + 1;
                ret[i] = matrix[row--][col];
                continue;
            }
            else if(visit[row][col-1] == 1){
                flag = flag % 4 + 1;
                ret[i] = matrix[row--][col];
                continue;
            }
            else{
                ret[i] = matrix[row][col--];
                continue;
                }
        }
        if(flag == 4){
            if(row - 1 == -1){
                flag = flag % 4 + 1;
                ret[i] = matrix[row][col++];
                continue;
            }
            else if(visit[row-1][col] == 1){
                flag = flag % 4 + 1;
                ret[i] = matrix[row][col++];
                continue;
            }
            else{
                ret[i] = matrix[row--][col];
                continue;
                }
        }    
    }
    return ret;
    }
}

//第四版 标答1 与第三版思路一致
时间复杂度：O(mn)O(mn)，其中 mm 和 nn 分别是输入矩阵的行数和列数。矩阵中的每个元素都要被访问一次。
空间复杂度：O(mn)O(mn)。需要创建一个大小为 m \times nm×n 的矩阵 \textit{visited}visited 记录每个位置是否被访问过。
class Solution {
    public int[] spiralOrder(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return new int[0];
        }
        int rows = matrix.length, columns = matrix[0].length;
        boolean[][] visited = new boolean[rows][columns];
        int total = rows * columns;
        int[] order = new int[total];
        int row = 0, column = 0;
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int directionIndex = 0;
        for (int i = 0; i < total; i++) {
            order[i] = matrix[row][column];
            visited[row][column] = true;
            int nextRow = row + directions[directionIndex][0], nextColumn = column + directions[directionIndex][1];
            if (nextRow < 0 || nextRow >= rows || nextColumn < 0 || nextColumn >= columns || visited[nextRow][nextColumn]) {
                directionIndex = (directionIndex + 1) % 4;
            }
            row += directions[directionIndex][0];
            column += directions[directionIndex][1];
        }
        return order;
    }
}
作者：LeetCode-Solution

//第五版 方法二 如果要求降低空间复杂度，不允许开o(mn)的空间怎么办
那么不难想到，办法就是不用visited来存储已经读过的数组位置 那么怎么才能做到呢
方法就是直接对四个边界，每读完之后缩减一行
最主要的是 顺时针 本来就是有顺序的！
我先自己写了一版
class Solution {
    public int[] spiralOrder(int[][] matrix) {
        if(matrix == null || matrix.length == 0 ||matrix[0].length == 0)return new int[0];
        int left = 0;//边界 每读完一行变化一个
        int right = matrix[0].length;
        int up = 0;
        int down = matrix.length;
        int[] ret = new int[matrix[0].length * matrix.length];

        int i = 0;
        while(i < matrix[0].length * matrix.length){

            for(int a = left; a < right; a++){
                ret[i] = matrix[up][a];·················································A
                i++;
            }
            up++;
            for(int b = up; b < down; b++){
                ret[i] = matrix[b][right-1];············································B
                i++;····································································E
                
            }
            right--;
            
            if(i == matrix[0].length * matrix.length)return ret;
            //上面这行代码很关键 没有的话就会出错
            出错的原因是
            高度 > 宽度 > 3
            或是
            宽度 > 高度 > 3
            （之所以 > 3 是因为当二维数组是2 * 3 或是 3 * 2 时，第一个顺时针刚好满足退出while的条件）
            当时当 > 3 时
            如果是宽度 > 高度，就会在C处出错 因为在 E 处 ，i 已经等于 matrix[0].length * matrix.length 了，但是由于没有运行到结尾 没法退出 然后由于宽度 > 高度 又刚好能运行C处的代码
            进而i++导致i >  matrix[0].length * matrix.length 数组越界报错
            如果是高度 > 宽度，就会在D处出错 因为在 E 处 ，i 已经等于 matrix[0].length * matrix.length 了，但是由于没有运行到结尾 没法退出 然后由于高度 > 宽度 又刚好能运行D处的代码
            进而i++导致i >  matrix[0].length * matrix.length 数组越界报错
            for(int c = right-1; c > left-1; c--){
                ret[i] = matrix[down - 1][c];············································C
                i++;
                
            }
            down--;
            for(int d = down-1; d > up-1; d--){··········································D
                ret[i] = matrix[d][left];
                i++;
            }
            left++;
        }
        return ret;
    }
}


//第六版 o（1）空间复杂度的大神写法
时间复杂度：O(mn)O(mn)，其中 mm 和 nn 分别是输入矩阵的行数和列数。矩阵中的每个元素都要被访问一次。
空间复杂度：O(1)O(1)。除了输出数组以外，空间复杂度是常数。
class Solution {
    public int[] spiralOrder(int[][] matrix) {
        if(matrix.length == 0) return new int[0];
        int l = 0, r = matrix[0].length - 1, t = 0, b = matrix.length - 1, x = 0;
        int[] res = new int[(r + 1) * (b + 1)];
        while(true) {
            for(int i = l; i <= r; i++) res[x++] = matrix[t][i]; // left to right.
            if(++t > b) break;
            for(int i = t; i <= b; i++) res[x++] = matrix[i][r]; // top to bottom.
            if(l > --r) break;
            for(int i = r; i >= l; i--) res[x++] = matrix[b][i]; // right to left.
            if(t > --b) break;
            for(int i = b; i >= t; i--) res[x++] = matrix[i][l]; // bottom to top.
            if(++l > r) break;
        }
        return res;
    }
}
作者：jyd
