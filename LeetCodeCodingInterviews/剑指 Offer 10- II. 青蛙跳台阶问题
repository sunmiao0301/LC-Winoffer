//第一版 经典的动态规划问题
通过 但是是错的！！！！刚巧通过罢了 改正后见第二版
0节台阶的方法是1
青蛙跳台阶问题： f(0)=1 , f(1)=1 , f(2)=2；
执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
34.9 MB
, 在所有 Java 提交中击败了
96.46%
的用户
class Solution {
    public int numWays(int n) {
    /*
    动态规划
    设立一个一维数组dp[i]
    其表示在第i节台阶时 有dp[i]种跳法
    那么dp[i] = dp[i-1] + dp[i-2]
    */
    if(n == 0 || n == 1)return 1;
    int[] dp = new int[n+1];//0 ~ n
    dp[0] = 0;
    dp[1] = 1;
    dp[2] = 2;
    for(int i = 3; i <= n; i++){
        dp[i] = (dp[i-1] % 1000000007 + dp[i-2] % 1000000007) % 1000000007;
    }
    return dp[n];
    }
}

//第二版 改正 : f(0) = 1
class Solution {
    public int numWays(int n) {
    /*
    动态规划
    设立一个一维数组dp[i]
    其表示在第i节台阶时 有dp[i]种跳法
    那么dp[i] = dp[i-1] + dp[i-2]
    */
    if(n == 0 || n == 1)return 1;
    int[] dp = new int[n+1];//0 ~ n
    dp[0] = 1;
    dp[1] = 1;
    for(int i = 2; i <= n; i++){
        dp[i] = (dp[i-1] % 1000000007 + dp[i-2] % 1000000007) % 1000000007;
    }
    return dp[n];
    }
}
