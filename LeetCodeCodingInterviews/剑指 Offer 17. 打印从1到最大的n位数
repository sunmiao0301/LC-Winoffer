//第一版 未考虑大数问题 没啥意义
Leetcode上没有设计好题 函数返回的是整数数组 所以大数越界问题的分析如下：
大数越界问题： 当 nn 较大时，endend 会超出 int32int32 整型的取值范围，超出取值范围的数字无法正常存储。
但由于本题要求返回 int 类型数组，相当于默认所有数字都在 int32 整型取值范围内，因此不考虑大数越界问题。

class Solution {
    public int[] printNumbers(int n) {
        //用返回一个整数列表来代替打印 看函数的返回值可知还是数组
        int ret = 1;
        for(int i = 0; i < n; i++){
            ret *= 10;
        }
        int[] arr = new int[ret - 1];
        for(int i = 0; i < ret - 1; i++){
            arr[i] = i + 1;
        }
    return arr;
    }
}

//第二版 考虑大数又不一样了
大数打印解法：
实际上，本题的主要考点是大数越界情况下的打印。需要解决以下三个问题：
1)无论是 short / int / long ... 任意变量类型，数字的取值范围都是有限的。因此，大数的表示应用字符串 String 类型。
2)使用 int 类型时，每轮可通过 +1+1 生成下个数字，而此方法无法应用至 String 类型。
并且，String 类型的数字的进位操作效率较低，例如 "9999" 至 "10000" 需要从个位到千位循环判断，进位 4 次。
观察可知，生成的列表实际上是 nn 位 00 - 99 的 全排列 ，因此可避开进位操作，通过递归生成数字的 String 列表。
3)基于分治算法的思想，先固定高位，向低位递归，当个位已被固定时，添加数字的字符串。
例如当 n = 2n=2 时（数字范围 1 - 991−99 ），固定十位为 00 - 99 ，按顺序依次开启递归，固定个位 00 - 99 ，终止递归并添加数字字符串
