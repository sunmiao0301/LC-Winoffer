## 第一版 没啥含金量

执行结果：
通过
显示详情
添加备注

执行用时：
8 ms
, 在所有 Java 提交中击败了
36.69%
的用户
内存消耗：
53.1 MB
, 在所有 Java 提交中击败了
82.56%
的用户
通过测试用例：
86 / 86

class Solution {
    public boolean isPalindrome(ListNode head) {
        //进阶：你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？
        List<Integer> list = new ArrayList<>();
        //int i = 0;
        while(head != null){
            list.add(head.val);
            head = head.next;
        }
        int l = 0;
        int r = list.size() - 1;
        while(l < r){
            if(list.get(l) != list.get(r)){
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
}

p.s. 因为之前看过题解 所以我知道还有两种写法 我想都自己写一下试试

## 第二版 递归 写不出来
## 注意！递归这种方法不仅使用了 O(n) 的空间，且比第一种方法更差，因为在许多语言中，堆栈帧的开销很大（如 Python）
## 并且最大的运行时堆栈深度为 1000（可以增加，但是有可能导致底层解释程序内存出错）。为每个节点创建堆栈帧极大的限制了算法能够处理的最大链表大小。


## 第三版 快慢指针 空间复杂度为 o(1)

避免使用 O(n) 额外空间的方法就是改变输入
我们可以将链表的后半部分反转（修改链表结构），然后将前半部分和后半部分进行比较。比较完成后我们应该将链表恢复原样。
虽然不需要恢复也能通过测试用例，但是使用该函数的人通常不希望链表结构被更改。
该方法虽然可以将空间复杂度降到 O(1) 但是在并发环境下，该方法也有缺点。在并发环境下，函数运行时需要锁定其他线程或进程对链表的访问，因为在函数执行过程中链表会被修改。

