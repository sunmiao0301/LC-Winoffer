//第一版 自己想出来的动态规划 效果还行
其实就是一个数学中 传递性 的思想
dp[i]表示的是到那天为止 最大的利润
那么如果后面那天一天的利润 小于当天利润和之前最大利润之和（之前最大利润也就是dp[i-1]) 
那么就叠加起来
也就是dp[i] = dp[i] + dp[i-1]
其可行性是因为：
（第 b+1 天价格-第 b 天价格）-（第 b 天价格-第 a 天价格）= 第 b-1 天价格-第a天价格

如果b+1当天的利润是大于当天利润和之前最大利润之和（之前最大利润也就是dp[i-1]) 
那么dp[i] = dp[i]
= 第b天利润
因为如果加上之前的 反而是拖累

执行结果：
通过
执行用时：
2 ms
, 在所有 Java 提交中击败了
65.34%
的用户
内存消耗：
38.2 MB
, 在所有 Java 提交中击败了
50.11%
的用户
class Solution {
    public int maxProfit(int[] prices) {
    /*
    一眼动态规划？
    如果小于就是0 利润不能为负
    维护一个最小值 一个最大值？ 然后如果最小值是0 不用继续走
    这个思路不行 因为小的可能在后
    那么就前后指针？（一共四个指针）
    相对值？
    我感觉还是动态规划
(0) 7  1  5  3  6  4
      -6 -2 -4 -1 -3
          4  2  5  3 
            -2  3 -2
                3 -2 
                   0
记录最大值为max
max来自dp[](prices[])
先遍历一遍 把所有差值求出来 第一个是0(7 - 7)
然后开始求dp[] 其中dp[i]表示到第i天时 最大的利润
具体的dp[i]求法是：
1）dp[i]取dp[i]和dp[i+1]+dp[i]中的较大值；
2）这其中存在一个传递关系
然后遍历第二遍 得到最大值
0 <= 数组长度 <= 10^5
    */
    if(prices.length == 0)return 0;  
    int[] dp = new int[prices.length];
    dp[0] = 0;
    for(int i = 1; i < prices.length; i++){
        dp[i] = prices[i] - prices[i-1]; 
    }
    int ret = 0;
    for(int i = 1; i < prices.length; i++){
        dp[i] = Math.max(dp[i], dp[i] + dp[i-1]);
        ret = Math.max(ret, dp[i]);
    }
    return ret;
    }
}

//第二版
尝试优化 效果一样
class Solution {
    public int maxProfit(int[] prices) {
    if(prices.length == 0)return 0;  
    int[] dp = new int[prices.length];
    dp[0] = 0;
    for(int i = 1; i < prices.length; i++){
        dp[i] = prices[i] - prices[i-1]; 
    }
    int ret = 0;
    for(int i = 1; i < prices.length; i++){
        //dp[i] = Math.max(dp[i], dp[i-1] + dp[i]);
        if(dp[i-1] > 0)
            dp[i] = dp[i] + dp[i-1];
        ret = Math.max(ret, dp[i]);
    }
    return ret;
    }
}

//第三版 优化了空间 多省了一个数组
但是还是不够
看来最好的方法不是动态规划？
执行结果：
通过
执行用时：
2 ms
, 在所有 Java 提交中击败了
65.34%
的用户
内存消耗：
38.2 MB
, 在所有 Java 提交中击败了
59.83%
的用户
class Solution {
    public int maxProfit(int[] prices) {
    if(prices.length == 0)return 0;  

    for(int i = prices.length - 1; i > 0; i--){
        prices[i] = prices[i] - prices[i-1];
    }
    prices[0] = 0;
    int ret = 0;
    for(int i = 1; i < prices.length; i++){
        prices[i] = Math.max(prices[i], prices[i-1] + prices[i]);
        ret = Math.max(ret, prices[i]);
    }
    return ret;
    }
}

//第四版
模仿K神思路


//K神 正确思路就是动态规划 但是比我这个思路好
执行结果：
通过
执行用时：
1 ms
, 在所有 Java 提交中击败了
98.49%
的用户
内存消耗：
38 MB
, 在所有 Java 提交中击败了
80.63%
的用户
class Solution {
    public int maxProfit(int[] prices) {
        int cost = Integer.MAX_VALUE, profit = 0;
        for(int price : prices) {
            cost = Math.min(cost, price);
            profit = Math.max(profit, price - cost);
        }
        return profit;
    }
}
