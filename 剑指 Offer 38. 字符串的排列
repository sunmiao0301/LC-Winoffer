//第一版 思路还是差了 想不出来
class Solution {
    public String[] permutation(String s) {
    //借此题复习一下排列和组合
    //返回值是字符串为元素的数组
    /*

    对于abc
    一位都不固定
    交换a与其余位 bac cba
    然后对于交换出的三种 再进行交换
    固定第一位
    对于abc a固定 abc acb
    对于bac b固定 bac bca
    对于cba c固定 cba cab

    对于abcd
    一位都不固定
    abcd bacd cbad dbca
    然后对于交换出的四种 再进行交换
    ...
    思路是对的 但是写不出
    */
    int arr_length = 1;
    for(int i = 1; i <= s.length(); i++){
        arr_length *= i;
    }
    String[] s = new String[arr_length];


    }
    void dfs(String s, int bits){
        for(int i = bits + 1; i < s.length(); i++){
            char_temp = s.charAt(bits);
            s.charAt(bits) = s.charAt(i);
            s.charAt(i) = char_temp;
            dfs(s, bits + 1);
        }

    }
}

//第二版 K神
class Solution {
    //为了让递归函数添加结果方便，定义到函数之外，这样无需带到递归函数的参数列表中
    List<String> list = new ArrayList<>();
    //同；但是其赋值依赖c，定义声明分开
    char[] c;
    public String[] permutation(String s) {
        c = s.toCharArray();
        //从第一层开始递归
        dfs(0);
        //将字符串数组ArrayList转化为String类型数组
        return list.toArray(new String[list.size()]);
    }

    private void dfs(int x) {
        //当递归函数到达第三层，就返回，因为此时第二第三个位置已经发生了交换
        if (x == c.length - 1) {
            //将字符数组转换为字符串
            list.add(String.valueOf(c));
            return;
        }
        //为了防止同一层递归出现重复元素
        HashSet<Character> set = new HashSet<>();
        //这里就很巧妙了,第一层可以是a,b,c那么就有三种情况，这里i = x,正巧dfs(0)，正好i = 0开始
        // 当第二层只有两种情况，dfs(1）i = 1开始
        for (int i = x; i < c.length; i++){
            //发生剪枝，当包含这个元素的时候，直接跳过
            if (set.contains(c[i])){
                continue;
            }
            set.add(c[i]);
            //交换元素，这里很是巧妙，当在第二层dfs(1),x = 1,那么i = 1或者 2， 不是交换1和1，要就是交换1和2
            swap(i,x);
            //进入下一层递归
            dfs(x + 1);
            //返回时交换回来，这样保证到达第1层的时候，一直都是abc。这里捋顺一下，开始一直都是abc，那么第一位置总共就3个交换
            //分别是a与a交换，这个就相当于 x = 0, i = 0;
            //     a与b交换            x = 0, i = 1;
            //     a与c交换            x = 0, i = 2;
            //就相当于上图中开始的三条路径
            //第一个元素固定后，每个引出两条路径,
            //     b与b交换            x = 1, i = 1;
            //     b与c交换            x = 1, i = 2;
            //所以，结合上图，在每条路径上标注上i的值，就会非常容易好理解了
            swap(i,x);
        }
    }

    private void swap(int i, int x) {
        char temp = c[i];
        c[i] = c[x];
        c[x] = temp;
    }
}
