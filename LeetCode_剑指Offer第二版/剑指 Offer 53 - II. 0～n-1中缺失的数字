//第一版 写思路写到一半发现这个思路有些麻烦 于是开始第二版思路
class Solution {
    public int missingNumber(int[] nums) {
    /*
    但是这与第一题有所不同
    第一题是找出现target的数的出现次数
    target是已知的数
    根据“大小”就能判断往哪边找，再数出现次数
    但是这一题是找缺失的数
    缺失的数不能通过“大小”判断，而是应该通过当前数是否处在中心位置来判断下一步往哪边找
    根据下面的测试
    我们可以推测出
    “如果不缺数 那么数组中间数应该是等于两个边界相加除以二,应该是等于i”
    “如果是中轴线的右边缺数 那么数组的中间数nums[(left + right) / 2]应该是大于(nums[left] + nums[right]) / 2”
    “如果是中轴线的左边缺数 那么数组的中间数nums[(left + right) / 2]应该是等于i”
    0123
    不缺数 nums[2] = 2    0+3/2 = 2 = 2
    023
    缺1 nums[1] = 2       0+3/2 = 2<=2
    013
    缺2 nums[1] = 1       0+3/2 = 2>1
    013456789
    缺2 nums[4] = 5       0+9/2 = 5<=4
    012345679
    缺8 nums[4] = 4       0+9/2 = 5>4
    0134
    缺2 nums[2] = 3       0+4/2 = 2<3
    */
    }
    int find(int[] nums, int left, int right){//left = 0; right = nums.length - 1;
    if(right - left <= 1){//两个数(三缺一){012>01 012>02 
        
    }
        if(nums[])
    }

        int mid = (left + right) / 2;
        if()
    }
}

//第二版 根据样例多次测试 最后才得到正确结果 这种试出来的结果 我不太喜欢
class Solution {
    public int missingNumber(int[] nums) {
    /*
    如果是这个数前面的数都正常，那么nums[index] == index
    那么下一步就是mid + 1和right
    如果这个数前面的数有不对的，那么nums[inded] > index
    那么下一步就是left和mid - 1
    */
    return find(nums, 0, nums.length - 1, -1);
    }
    int find(int[] nums, int left, int right, int flag){
        if(nums[right] == right)//前面的全不缺数，那么缺失的就是最后一位数
            return right + 1;
        if(nums[left] != left)//全部都缺，那么缺失的就是最前面的数
            return left;
        int mid = (left + right)/2;
        //如何处理013  023之间的矛盾··················通过加一个flag 标记出这个left == mid == right 是由mid - 1 还是由mid + 1 得来的
        if(mid == left && flag == 0)return nums[left] + 1;//如果是由mid - 1得来的，那么就是return nums[left] + 1
        if(mid == right && flag == 1)return nums[right] - 1;//如果是由mid + 1得来的，那么就是return nums[right] - 1
        if(nums[mid] == mid)
            return find(nums, mid+1, right, 1);
        else
            return find(nums, left, mid-1, 0);
    }
}

//第三版 K神 名言 对于有序的数组, 都应该想到用二分法搜索！！！！！！！！！！！！！！
根据题意，数组可以按照以下规则划分为两部分。
左子数组： nums[i] = nums[i]
右子数组： nums[i] != nums[i] 
缺失的数字等于 “右子数组的首位元素” 对应的索引；
因此考虑使用二分法查找 “右子数组的首位元素”

class Solution {
    public int missingNumber(int[] nums) {
        int i = 0, j = nums.length - 1;
        while(i <= j) {
            int m = (i + j) / 2;
            if(nums[m] == m) i = m + 1;
            else j = m - 1;
        }
        return i;
    }
}

//第四版 根据K神的一句话思路“缺失的数字等于 “右子数组的首位元素” 对应的索引”写的 
结果：
92 / 122 个通过测试用例
状态：解答错误
提交时间：2 分钟前
最后执行的输入：
[1]
检查了一下 错在A处代码
将A处代码修正后得到正确结果为第五版
class Solution {
    public int missingNumber(int[] nums) {
    //找第一个不满足nums[index] = index的数
    return find(nums, 0, nums.length - 1);
    }
    int find(int[] nums, int left, int right){
        int mid = (left + right)/2;
        if(nums[mid] == mid){
            if(mid + 1 == right)
                return nums[mid + 1] == mid + 1?mid + 2:mid + 1;
            if(mid + 1 > right)
                return mid + 1;
            return find(nums, mid + 1, right);
        }
        else{
            if(mid - 1 == left)
                return nums[mid - 1] == mid - 1?mid:mid-1;
            if(mid - 1 < left)
                return mid - 1;····································A
            return find(nums, left, mid - 1);
        }

    }
}

//第五版
执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
38.9 MB
, 在所有 Java 提交中击败了
53.50%
的用户
class Solution {
    public int missingNumber(int[] nums) {
    //找第一个不满足nums[index] = index的数
    return find(nums, 0, nums.length - 1);
    }
    int find(int[] nums, int left, int right){
        int mid = (left + right)/2;
        if(nums[mid] == mid){
            if(mid + 1 == right)
                return nums[mid + 1] == mid + 1?mid + 2:mid + 1;
            if(mid + 1 > right)
                return mid + 1;
            return find(nums, mid + 1, right);
        }
        else{
            if(mid - 1 == left)
                return nums[mid - 1] == mid - 1?mid:mid-1;
            if(mid - 1 < left)
                return mid;
            return find(nums, left, mid - 1);
        }

    }
}
