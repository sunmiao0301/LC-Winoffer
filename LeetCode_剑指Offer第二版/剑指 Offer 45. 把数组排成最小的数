//第一版 看了题解大致写的 运行示例如下：
输入
[10,2]
输出
"20"
预期结果
"102"
原来是A处的忘记加{}了 以后要注意
改正见第二版

class Solution {
    public String minNumber(int[] nums) {
    /*
    最后的结果不需要去掉前导0
    把对全体的排序 化成 对一对的排序
    用快排吧?
    先用冒泡试试
    */
    //int left = 0;
    //int rigth = nums.length - 1;
    int temp = 0;
    String ret = "";
    for(int i = 0; i < nums.length; i++){
        for(int j = i + 1; j < nums.length; j++){
            if(exchange(i, j, nums))·························A
                temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
        }
    }
    for(int i = 0; i < nums.length; i++){
        ret += nums[i];
    }
    return ret;
    }
    boolean exchange(int i, int j, int[] nums){
        String i_j = "" + nums[i] + nums[j];
        String j_i = "" + nums[j] + nums[i];
        if(Integer.parseInt(i_j) > Integer.parseInt(j_i))
            return true;
        return false;
    }
}

//第二版 
29 / 222 个通过测试用例
状态：执行出错
提交时间：几秒前
执行出错信息：
java.lang.NumberFormatException: For input string: "999999998999999997"
  at line 68, java.base/java.lang.NumberFormatException.forInputString
  at line 658, java.base/java.lang.Integer.parseInt
  at line 776, java.base/java.lang.Integer.parseInt
  at line 28, Solution.exchange
  at line 13, Solution.minNumber
  at line 57, __DriverSolution__.__helper__
  at line 82, __Driver__.main
最后执行的输入：
[999999998,999999997,999999999]
猜测是数字超出int范围了
改成long 如下第三版

class Solution {
    public String minNumber(int[] nums) {
    int temp = 0;
    String ret = "";
    for(int i = 0; i < nums.length; i++){
        for(int j = i + 1; j < nums.length; j++){
            if(exchange(i, j, nums)){
                temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }
        }
    }
    for(int i = 0; i < nums.length; i++){
        ret += nums[i];
    }
    return ret;
    }
    boolean exchange(int i, int j, int[] nums){
        String i_j = "" + nums[i] + nums[j];
        String j_i = "" + nums[j] + nums[i];
        if(Integer.parseInt(i_j) > Integer.parseInt(j_i))
            return true;
        return false;
    }
}

//第三版 通过 但是效果不好
执行结果：
通过
执行用时：
38 ms
, 在所有 Java 提交中击败了
5.01%
的用户
内存消耗：
39.1 MB
, 在所有 Java 提交中击败了
4.99%
的用户
class Solution {
    public String minNumber(int[] nums) {
    int temp = 0;
    String ret = "";
    for(int i = 0; i < nums.length; i++){
        for(int j = i + 1; j < nums.length; j++){
            if(exchange(i, j, nums)){
                temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }
        }
    }
    for(int i = 0; i < nums.length; i++){
        ret += nums[i];
    }
    return ret;
    }
    boolean exchange(int i, int j, int[] nums){
        String i_j = "" + nums[i] + nums[j];
        String j_i = "" + nums[j] + nums[i];
        if(Long.parseLong(i_j) > Long.parseLong(j_i))
            return true;
        return false;
    }
}

//第四版 自己写的基于快排 而不是冒泡的
18 / 222 个通过测试用例
状态：超出时间限制
提交时间：3 分钟前
最后执行的输入：
[1,1,1]
说明我这写的不全对
我把这个基于“字符串‘大小’比较算法”的快排改成了对int型数据的快排算法
代码如下：
class Solution {
    void quicksort(int left, int right, int[]nums){
        if(left >= right)return;
        int i = left;//key下标
        int j = right;
        while(left < right){
            while(left < right && nums[left] < nums[i]){left++;}
            while(left < right && nums[right] > nums[i]){right--;}
            swap(left, right, nums);
            /*
            对换条件的左右值之后
            需要左右各自再往里进一步···································A
            */
            left++;
            right--;
        }
        swap(i, left, nums);
        quicksort(i, left - 1, nums);
        quicksort(left + 1, j, nums);
    }
    String ret = "";
    public String minNumber(int[] nums) {
        quicksort(0, nums.length - 1, nums);
        for(int i = 0; i < nums.length; i++)
            ret += nums[i];
            return ret;
        }
    int temp = 0;
    void swap(int a, int b, int[] nums){
        temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}
运行样例[1,1,1]时也报错超出时间限制 说明当数组中元素相同时，会发生无限循环 检查到错误在代码A处：
由此 我们再对原代码进行修改 见第五版

class Solution {
    /*
    交换式快排:
    void quicksort(int left, int right, int[]nums){
        if(left >= right)return;
        int i = left;//key下标
        int j = right;
        while(left < right){
            while(left < right && nums[left] < nums[i]){left++;}
            while(left < right && nums[right] > nums[i]){right--;}
            swap(left, right, nums);
        }
        swap(i, left(right),nums);
        quicksort(i, left - 1, nums);
        quicksort(left + 1, j, nums);
    }
    */
    String ret = "";
    public String minNumber(int[] nums) {
        quicksort(0, nums.length - 1, nums);
    for(int i = 0; i < nums.length; i++)
        ret += nums[i];
        return ret;
    }
    
    boolean need_exchange(int i, int j, int[] nums){
        String i_j = "" + nums[i] + nums[j];
        String j_i = "" + nums[j] + nums[i];
        if(Long.parseLong(i_j) > Long.parseLong(j_i))
            return true;
        return false;
    }

    void quicksort(int left, int right, int[] nums){
        if(left >= right)return;
        int i = left;
        int j = right;
        while(left < right){
            while(left < right && need_exchange(i, left, nums)){left++;}
            while(left < right && need_exchange(right, i, nums)){right--;}
            swap(left, right, nums);
        }
        swap(i, left, nums);
        quicksort(i, left - 1, nums);
        quicksort(left + 1, j, nums);
    }
    int temp = 0;
    void swap(int a, int b, int[] nums){
        temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}

//第五版 对第四版进行改正之后
25 / 222 个通过测试用例
状态：解答错误
提交时间：几秒前
最后执行的输入：
[10,2]
对样例不行
检查：
原来是快排忽略了一些
正确的快排如下：
class Solution {
    void quicksort(int left, int right, int[]nums){
        if(left >= right)return;
        int i = left;//key下标
        int j = right;
        while(left < right){
            while(left < right && nums[left] <= nums[i]){left++;}······························换 < 为 <=
            while(left < right && nums[right] >= nums[i]){right--;}
            swap(left, right, nums);
        }
        swap(i, right, nums);
        quicksort(i, right - 1, nums);
        quicksort(right + 1, j, nums);
    }
    String ret = "";
    public String minNumber(int[] nums) {
        quicksort(0, nums.length - 1, nums);
        for(int i = 0; i < nums.length; i++)
            ret += nums[i];
            return ret;
        }
    int temp = 0;
    void swap(int a, int b, int[] nums){
        temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}
所以对这一版修改为第六版
class Solution {
    String ret = "";
    public String minNumber(int[] nums) {
        quicksort(0, nums.length - 1, nums);
    for(int i = 0; i < nums.length; i++)
        ret += nums[i];
        return ret;
    }
    
    boolean need_exchange(int i, int j, int[] nums){
        String i_j = "" + nums[i] + nums[j];
        String j_i = "" + nums[j] + nums[i];
        if(Long.parseLong(i_j) > Long.parseLong(j_i))
            return true;
        return false;
    }

    void quicksort(int left, int right, int[] nums){
        if(left >= right)return;
        int i = left;
        int j = right;
        while(left < right){
            while(left < right && need_exchange(i, left, nums)){left++;}
            while(left < right && need_exchange(right, i, nums)){right--;}
            swap(left, right, nums);
            left++;
            right--;
        }
        swap(i, left, nums);
        quicksort(i, left - 1, nums);
        quicksort(left + 1, j, nums);
    }
    int temp = 0;
    void swap(int a, int b, int[] nums){
        temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}

//第六版 到这里 我才发现好像问题出在need_exchange函数上
无论我把A处的代码改成 >= 还是 <= 结果都是错误的210 而不是102。。。
boolean need_exchange(int i, int j, int[] nums){
        String i_j = "" + nums[i] + nums[j];
        String j_i = "" + nums[j] + nums[i];
        if(Long.parseLong(i_j) >= Long.parseLong(j_i))·················A
            return true;
        return false;
    }
问题不在于此
在于快排顺序不对
改正后通过 如下 但是效果不好：
执行用时：
20 ms
, 在所有 Java 提交中击败了
6.36%
的用户
内存消耗：
38.5 MB
, 在所有 Java 提交中击败了
8.84%
的用户

class Solution {
    String ret = "";
    public String minNumber(int[] nums) {
        quicksort(0, nums.length - 1, nums);
    for(int i = 0; i < nums.length; i++)
        ret += nums[i];
        return ret;
    }
    
    boolean need_exchange(int i, int j, int[] nums){
        String i_j = "" + nums[i] + nums[j];
        String j_i = "" + nums[j] + nums[i];
        if(Long.parseLong(i_j) >= Long.parseLong(j_i))
            return true;
        return false;
    }

    void quicksort(int left, int right, int[] nums){
        if(left >= right)return;
        int i = left;
        int j = right;
        while(left < right){
            while(left < right && need_exchange(right, i, nums)){right--;}
            while(left < right && need_exchange(i, left, nums)){left++;}
            swap(left, right, nums);
        }
        swap(i, left, nums);
        quicksort(i, left - 1, nums);
        quicksort(left + 1, j, nums);
    }
    int temp = 0;
    void swap(int a, int b, int[] nums){
        temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}


//第版 K神的快排的方法
class Solution {
    public String minNumber(int[] nums) {
        String[] strs = new String[nums.length];
        for(int i = 0; i < nums.length; i++)
            strs[i] = String.valueOf(nums[i]);
        quickSort(strs, 0, strs.length - 1);
        StringBuilder res = new StringBuilder();
        for(String s : strs)
            res.append(s);
        return res.toString();
    }
    void quickSort(String[] strs, int l, int r) {
        if(l >= r) return;
        int i = l, j = r;
        String tmp = strs[i];
        while(i < j) {
            while((strs[j] + strs[l]).compareTo(strs[l] + strs[j]) >= 0 && i < j) j--;
            while((strs[i] + strs[l]).compareTo(strs[l] + strs[i]) <= 0 && i < j) i++;
            tmp = strs[i];
            strs[i] = strs[j];
            strs[j] = tmp;
        }
        strs[i] = strs[l];
        strs[l] = tmp;
        quickSort(strs, l, i - 1);
        quickSort(strs, i + 1, r);
    }
}

//第版 K神的借助内置函数的方法
class Solution {
    public String minNumber(int[] nums) {
        String[] strs = new String[nums.length];
        for(int i = 0; i < nums.length; i++)
            strs[i] = String.valueOf(nums[i]);
        Arrays.sort(strs, (x, y) -> (x + y).compareTo(y + x));
        StringBuilder res = new StringBuilder();
        for(String s : strs)
            res.append(s);
        return res.toString();
    }
}
