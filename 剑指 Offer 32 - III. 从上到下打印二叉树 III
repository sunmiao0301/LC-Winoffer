//第一版 考虑到其与剑指 Offer 32 - II 的差别只在于将偶数层的节点值输出顺序翻过来 所以自然而然的就想到用stack来实现
通过 但是效果不好
执行结果：
通过
执行用时：
3 ms
, 在所有 Java 提交中击败了
29.09%
的用户
内存消耗：
38.8 MB
, 在所有 Java 提交中击败了
13.87%
的用户
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int depth = 1;
    public List<List<Integer>> levelOrder(TreeNode root) {
    /*
    建立一个栈对奇数行进行单独处理
    如果不用栈但是用for的情况 前面被处理的节点导致向队列中添加新的节点 会不会对i产生影响 （我觉得应该会 所以还是用栈）
    */
    List<List<Integer>> ret = new LinkedList<>();
    if(root == null)return ret;
    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);
    Stack<Integer> stack = new Stack<>();//注意 存的是TreeNode.val
    while(!queue.isEmpty()){
        List<Integer> temp = new ArrayList<>();
        if(depth % 2 == 1){//奇数行 正常
            for(int i = queue.size(); i > 0; i--){
                if(queue.peek().left != null)queue.offer(queue.peek().left);
                if(queue.peek().right != null)queue.offer(queue.peek().right);
                temp.add(queue.poll().val);//ArrayList是add还是offer    
            }
            ret.add(temp);
            depth++;
        }
        else{
            for(int i = queue.size(); i > 0; i--){
                if(queue.peek().left != null)queue.offer(queue.peek().left);
                if(queue.peek().right != null)queue.offer(queue.peek().right);
                stack.push(queue.poll().val);
            }
            while(!stack.isEmpty()){
                temp.add(stack.pop());//ArrayList是add还是offer    
            }
            ret.add(temp);
            depth++;
            }
        }
        return ret;
    }
}

//第二版 看了题解 K神提出了三种方法
K神提出的版本有三个 时间空间复杂度都一致
    1）双向队列 + 判断奇、偶层
    2）双向队列 + 不判断 直接把奇 偶层都写一遍 逻辑分离（按照先奇后偶的顺序写一遍）
    3）队列 + 最后将temp添加到ret时候 如果是奇数层就正序 如果是偶数就倒序
    PS1 要使用双向队列首先要对LinkedList里的方法熟悉。
    PS2 注意K神选择的判断层数奇偶选择的不是新建一个全局变量depth 而是通过ret列表的大小 来判断 很巧妙
    
    看起来上面的思路都很简单 但是实现起来发现不一般
    以思路1）为例 我第一次实现如下 运行不成功：
    /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
    /*
    1）双向列表 + ret 判断奇数偶数
    如此 思路就是：
    奇数层的值 先进 将来是先出（用作队列）使用 出去时 
    偶数层的值 先进 将来是后出（用作栈）双端队列当做栈使用 出去时 需要填入下一层 此时填的时候是奇数层每个节点的右节点再左节点 然后还是从队列左端填入
    */
    List<List<Integer>> ret = new LinkedList<>();
    if(root == null)return ret;
    Queue<TreeNode> queue = new LinkedList<>();//双向队列
    queue.offer(root);
    while(!queue.isEmpty()){
        List<Integer> temp = new ArrayList<>();
        if(ret.size() % 2 == 0){//奇数层 没有用到新方法
            for(int i = queue.size(); i > 0; i--){
                if(queue.peek().left != null)queue.offer(queue.peek().left);
                if(queue.peek().right != null)queue.offer(queue.peek().right);
                temp.add(queue.poll().val);
            }
            ret.add(temp);
        }
        else{//偶数层 需要新方法LinkedList的
            for(int i = queue.size(); i > 0; i--){
                if(queue.getLast().right != null)queue.addFirst(queue.getLast().right);
                if(queue.getLast().left != null)queue.addFirst(queue.getLast().left);
                temp.add(queue.removeLast().val);
            }
            ret.add(temp);
        }
    }
    return ret;
    }
}
