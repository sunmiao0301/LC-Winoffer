//第一版 想当然了 只考虑了一步 实际上这样实现的话 
//如果栈中有多个数 然后连续删除的时候 那么连续删除的第二次就会出错
执行结果：
解答错误
显示详情
输入：
["CQueue","deleteHead","appendTail","deleteHead","appendTail","appendTail","deleteHead","deleteHead","deleteHead","appendTail","deleteHead","appendTail","appendTail","appendTail","appendTail","appendTail","appendTail","deleteHead","deleteHead","deleteHead","deleteHead"]
[[],[],[12],[],[10],[9],[],[],[],[20],[],[1],[8],[20],[1],[11],[2],[],[],[],[]]
输出：
[null,-1,null,12,null,null,10,9,-1,null,20,null,null,null,null,null,null,1,2,8,11]
预期结果：
[null,-1,null,12,null,null,10,9,-1,null,20,null,null,null,null,null,null,1,8,20,1]
//为了解决 必须是两个栈分工一个用于添加 一个用于删除 不然就出错
class CQueue {
     Stack<Integer> stack1;
     Stack<Integer> stack2;
    /*
    构思了一下 其实就是两个栈互相吞吐 比如栈1 栈2 选择有数的那个栈作为实现的队列
    加数没变化 和栈一样的加 但是删数就不一样了 就把当前有数的栈一个一个拿出来存入另外一个栈
    但是最后一个数不要 这样存完后有数的栈就作为队列
    */
    //若队列中没有元素，deleteHead 操作返回 -1(是返回 不是加入)
    public CQueue() {
        stack1 = new Stack<Integer>();
        stack2 = new Stack<Integer>();
        //void appendTail(int value);
        //int deleteHead();
    }
    
    public void appendTail(int value) {//加数只往有数的里面加
        if(stack1.empty() == true){
            stack2.push(value);
        }else{
            stack1.push(value);
        }
    }
    
    public int deleteHead() {
        if(stack1.empty() == true){
            if(stack2.empty() == true)
                return -1;
            else{
            while(stack2.size() > 1){
                stack1.push(stack2.pop());                
            }
            int ret = stack2.pop();
            return ret;}
        }else{
            if(stack1.empty() == true)
                return -1;
            else{
            while(stack1.size() > 1){
                stack2.push(stack1.pop());                
            }
            int ret = stack1.pop();
            return ret;}
        }        
    }
}

/**
 * Your CQueue object will be instantiated and called as such:
 * CQueue obj = new CQueue();
 * obj.appendTail(value);
 * int param_2 = obj.deleteHead();
 */
 
 //第二版
  /*
  第二版在第一版的基础上改进 原理不变 但是要明确分工 一个就用来存储 一个就用来返回删除的
  每次数从存储栈到删除栈 删除之后 就得再把它存回去
  */
执行结果：
通过
显示详情
执行用时：
350 ms
, 在所有 Java 提交中击败了
5.05%
的用户
内存消耗：
46.6 MB
, 在所有 Java 提交中击败了
65.37%
的用户
class CQueue {
     Stack<Integer> stack_add;
     Stack<Integer> stack_del;
   
    public CQueue() {
        stack_add = new Stack<Integer>();
        stack_del = new Stack<Integer>();
        //void appendTail(int value);
        //int deleteHead();
    }
    
    public void appendTail(int value) {//加数只往存储栈stack_add的里面加
        stack_add.push(value);
    }
    
    public int deleteHead() {
        if(stack_add.empty() == true)
            return -1;
        while(stack_add.size() > 1){
            stack_del.push(stack_add.pop());
        }
        int ret = stack_add.pop();
        while(stack_del.empty() == false){
            stack_add.push(stack_del.pop());
        }
        return ret;
    }   
}

/**
 * Your CQueue object will be instantiated and called as such:
 * CQueue obj = new CQueue();
 * obj.appendTail(value);
 * int param_2 = obj.deleteHead();
 */
