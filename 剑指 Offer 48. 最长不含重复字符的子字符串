//第一版 写的是我认为的动态规划 但是在395 / 987 个通过测试用例 时出错
状态：解答错误
提交时间：7 分钟前
最后执行的输入：
"bbtablud"

输入：
"bbtablud"
输出：
5
预期结果：
6

看了这个样例 我的想法就是双层for循环中内层的for循环需要从当前下标位置往前遍历 而不是从0往当前位置遍历

class Solution {
    public int lengthOfLongestSubstring(String s) {
    /*
    第一反应就是动态规划
    但是我想到的所谓的动态规划思路仍需要遍历很多次
    dp[i] 是 dp[i]处字符为结尾字符串的最大长度
    */
    if(s.equals(""))return 0;···························································字符串用equals可以 用==不行
    int[] dp = new int[s.length()];
    dp[0] = 1;
    int i = 0;
    int j = 0;
    for(i = 1; i < s.length(); i++){//i是数组dp[]下标
        for(j = i - dp[i-1]; j < i; j++){//j好像不必从0开始找
            if(s.charAt(j) == s.charAt(i)){
                dp[i] = dp[i-1] + 1 - (j + 1);
                break;
            }
        }
        if(j == i)
            dp[i] = dp[i-1] + 1;
    }
    int max = 0;
    for(int k = 0; k < dp.length; k++){
        if(dp[k] > max)
            max = dp[k];
    }
    return max;
    }
}

//第二版
对第一版发现的问题进行修改 运行成功
执行结果：
通过
执行用时：
24 ms
, 在所有 Java 提交中击败了
8.99%
的用户
内存消耗：
38.5 MB
, 在所有 Java 提交中击败了
59.36%
的用户
但是写完第二版我发现第一版其实没有逻辑上的问题 其实是for循环的下标开始值、结束值、没有思考、处理好
那么我就试试把第一版 在对逻辑不进行修改的基础上 也改对 见第三版

写了很久 发现不行 
原因是dp[i]是以字符串s中下标为i处的字符为 结尾! 的不重复字符串的最大长度 所以通过dp[i-1]只能倒推

class Solution {
    public int lengthOfLongestSubstring(String s) {
    /*
    第一反应就是动态规划
    但是我想到的所谓的动态规划思路仍需要遍历很多次
    dp[i] 是 dp[i]处字符为结尾字符串的最大长度
    */
    if(s.equals(""))return 0;
    int[] dp = new int[s.length()];
    dp[0] = 1;
    int i = 0;
    int j = 0;
    for(i = 1; i < s.length(); i++){//i是数组dp[]下标
        for(j = i - 1; j >= i - dp[i-1]; j--){//
            if(s.charAt(j) == s.charAt(i)){
                dp[i] = i - j;
                break;
            }
        }
        if(j == i - dp[i-1] - 1) 
            dp[i] = dp[i-1] + 1;
    }
    int max = 0;
    for(int k = 0; k < dp.length; k++){
        if(dp[k] > max)
            max = dp[k];
    }
    return max;
    }
}

//第三版
缺少AB之间的代码会导致在"bbtab"这种例子时 到第三个b时出错 加上AB之间代码即可解决 但是还有错：
524 / 987 个通过测试用例
执行结果：
解答错误
输入：
"aabaab!bb"
输出：
2
预期结果：
3
class Solution {
    public int lengthOfLongestSubstring(String s) {
    /*
    第一反应就是动态规划
    但是我想到的所谓的动态规划思路仍需要遍历很多次
    dp[i] 是 dp[i]处字符为结尾字符串的最大长度
    */
    if(s.equals(""))return 0;
    int[] dp = new int[s.length()];
    dp[0] = 1;
    int i = 0;
    int j = 0;
    for(i = 1; i < s.length(); i++){//i是数组dp[]下标
        for(j = i - dp[i-1]; j < i; j++){//j好像不必从0开始找
            if(s.charAt(j) == s.charAt(i) && j == i - dp[i-1]){························A
                dp[i] = dp[i-1];
                break;
            }··········································································B
            if(s.charAt(j) == s.charAt(i))
                dp[i] = dp[i-1] - j;
                break;
            }
        }
        if(j == i)
            dp[i] = dp[i-1] + 1;
    }
    int max = 0;
    for(int k = 0; k < dp.length; k++){
        if(dp[k] > max)
            max = dp[k];
    }
    return max;
    }
}

//第四版 对于第二版 虽然通过 但是效果不够好
究其原因是for循环太慢了
考虑到字符的 ASCII 码范围为 0 ~ 127 ，哈希表 dic 最多使用 O(128) = O(1)大小的额外空间。
所以最好的方法是动态规划 + 哈希表
K神对于哈希表的常用 初始化/更新 方法是
Java 的 getOrDefault(key, default)getOrDefault(key,default) ， 代表当哈希表包含键 keykey 时返回对应 valuevalue ，不包含时返回默认值 defaultdefault 。

