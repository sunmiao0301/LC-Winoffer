//第一版 大致了解动态规划的思想 自己写出来的 但是晕晕的
后来我才知道我这不算是DP 而是贪心

贪心 核心思路是：尽可能把绳子分成长度为3的小段，这样乘积最大

步骤如下：

如果 n == 2，返回1，如果 n == 3，返回2，两个可以合并成n小于4的时候返回n - 1
如果 n == 4，返回4
如果 n > 4，分成尽可能多的长度为3的小段，每次循环长度n减去3，乘积res乘以3；最后返回时乘以小于等于4的最后一小段
以上2和3可以合并
代码

class Solution {
    public int cuttingRope(int n) {
        if(n < 4){
            return n - 1;
        }
        int res = 1;
        while(n > 4){
            res *= 3;
            n -= 3;
        }
        return res * n;
    }
}
复杂度分析
时间复杂度：O(n)
空间复杂度：O(1)

执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
35.3 MB
, 在所有 Java 提交中击败了
33.80%
的用户
class Solution {
    public int cuttingRope(int n) {
    /*
    明显也是动态规划
    注意剪成m段的m是大于1的 所以不能不减
    //
    不好 没分割前大
    n = 2 --1 * 1 = 1
    n = 3 --2 * 1 = 2
    开始好起来
    n = 4 --2 * 2（相等 可以不分割）
    n = 5 --2 * 3（分割之后大于分割前 必分割）
    n = 6 --3 * 3
    三位
    n = 7 --2 2 3 = 
    n = 8 --3 3 2
    n = 9 --3 3 3
    再往上的话就是有4了 根据分析我们知道4 = 2 * 2 没差
    大于5 就是有3选3 不然剩1不好处理
    经过上面的分析 其实动态规划有点类似于数学归纳法
    */
    if(n == 2)return 1;
    if(n == 3)return 2;
    if(n == 4)return 4;
    return 3 * helper(n - 3);
    }
    int helper(int n){
        if(n == 2)return 2;
        if(n == 3)return 3;
        if(n == 4)return 4;
        return 3 * helper(n - 3);
    }
}

//第二版 K神的数学推导思路
推导过程链接：
https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/mian-shi-ti-14-i-jian-sheng-zi-tan-xin-si-xiang-by/

class Solution {
    public int cuttingRope(int n) {
        if(n <= 3) return n - 1;
        int a = n / 3, b = n % 3;
        if(b == 0) return (int)Math.pow(3, a);
        if(b == 1) return (int)Math.pow(3, a - 1) * 4;
        return (int)Math.pow(3, a) * 2;
    }
}

//第三版 我又写了一版我认为的动态规划
执行结果：
通过
执行用时：
0 ms
, 在所有 Java 提交中击败了
100.00%
的用户
内存消耗：
35.3 MB
, 在所有 Java 提交中击败了
29.22%
的用户
class Solution {
    public int cuttingRope(int n) {
        if(n == 2 || n == 3)return n - 1;
        int[] dp = new int[n + 1];//0 ~ n
        dp[2] = 2;
        dp[3] = 3;
        dp[4] = 4;
        for(int i = 5; i <= n; i++){
            dp[i] = 3 * dp[i - 3];
        }
        return dp[n];
    }
}

//第四版 正确的动态规划写法 效果还没我的好。。
class Solution {
    public int cuttingRope(int n) {
        int[] dp=new int[n+1];
        dp[2]=1;//n=2时，最大乘积为1；dp[1]可以忽略
        for(int i=3;i<n+1;i++){
            for(int j=1;j<i;j++){
                //j即是将n从第j处分割
                //Math.max(j*(i-j),j*dp[i-j]) 中 j*(i-j)指的是分割一次后的乘积；j*dp[i-j]指
                //分割一次后，剩余部分继续分割后的最大乘积,前面已经求解过，所以只需要取结果
                //下面综合起来就是，但j取不同时，与前一次j取值后的dp[i]比较，取最大值，直到j遍历完
                dp[i]=Math.max(dp[i],Math.max(j*(i-j),j*dp[i-j]));
            }
        }
        return dp[n];
    }
}
